// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field
import 'dart:ffi' as ffi;

@ffi.Native<ffi.Int32 Function(ffi.Pointer<executor>, ffi.Pointer<executor_configuration>, ffi.Pointer<executor_scheduler>, ffi.Uint32)>(
    symbol: 'executor_initialize', assetId: 'executor-bindings', isLeaf: true)
external int executor_initialize(
  ffi.Pointer<executor> executor,
  ffi.Pointer<executor_configuration> configuration,
  ffi.Pointer<executor_scheduler> notifier,
  int id,
);

@ffi.Native<ffi.Int8 Function(ffi.Pointer<executor>, ffi.Int64)>(symbol: 'executor_register', assetId: 'executor-bindings', isLeaf: true)
external int executor_register(
  ffi.Pointer<executor> executor,
  int callback,
);

@ffi.Native<ffi.Int8 Function(ffi.Pointer<executor>)>(symbol: 'executor_unregister', assetId: 'executor-bindings', isLeaf: true)
external int executor_unregister(
  ffi.Pointer<executor> executor,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<executor>)>(symbol: 'executor_peek', assetId: 'executor-bindings', isLeaf: true)
external int executor_peek(
  ffi.Pointer<executor> executor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<executor>)>(symbol: 'executor_submit', assetId: 'executor-bindings', isLeaf: true)
external void executor_submit(
  ffi.Pointer<executor> executor,
);

@ffi.Native<ffi.Int8 Function(ffi.Pointer<executor>)>(symbol: 'executor_awake', assetId: 'executor-bindings', isLeaf: true)
external int executor_awake(
  ffi.Pointer<executor> executor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<executor>, ffi.Uint32)>(symbol: 'executor_sleep', assetId: 'executor-bindings', isLeaf: true)
external void executor_sleep(
  ffi.Pointer<executor> executor,
  int completions,
);

@ffi.Native<ffi.Int8 Function(ffi.Pointer<executor>, ffi.Int32, ffi.Pointer<executor_task>)>(symbol: 'executor_call_native', assetId: 'executor-bindings', isLeaf: true)
external int executor_call_native(
  ffi.Pointer<executor> executor,
  int target_ring_fd,
  ffi.Pointer<executor_task> message,
);

@ffi.Native<ffi.Int8 Function(ffi.Pointer<executor>, ffi.Pointer<executor_task>)>(symbol: 'executor_callback_to_native', assetId: 'executor-bindings', isLeaf: true)
external int executor_callback_to_native(
  ffi.Pointer<executor> executor,
  ffi.Pointer<executor_task> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<executor>)>(symbol: 'executor_destroy', assetId: 'executor-bindings', isLeaf: true)
external void executor_destroy(
  ffi.Pointer<executor> executor,
);

@ffi.Native<ffi.Bool Function(ffi.Pointer<executor_scheduler>, ffi.Pointer<executor_scheduler_configuration>)>(symbol: 'executor_scheduler_initialize', assetId: 'executor-bindings', isLeaf: true)
external bool executor_scheduler_initialize(
  ffi.Pointer<executor_scheduler> notifier,
  ffi.Pointer<executor_scheduler_configuration> configuration,
);

@ffi.Native<ffi.Bool Function(ffi.Pointer<executor_scheduler>)>(symbol: 'executor_scheduler_shutdown', assetId: 'executor-bindings', isLeaf: true)
external bool executor_scheduler_shutdown(
  ffi.Pointer<executor_scheduler> notifier,
);

final class executor_configuration extends ffi.Struct {
  @ffi.Size()
  external int quota_size;

  @ffi.Size()
  external int preallocation_size;

  @ffi.Size()
  external int slab_size;

  @ffi.Size()
  external int static_buffers_capacity;

  @ffi.Size()
  external int static_buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.Uint32()
  external int ring_flags;

  @ffi.Bool()
  external bool trace;
}

final class executor_native_configuration extends ffi.Struct {
  @ffi.Uint64()
  external int completion_wait_timeout_milliseconds;

  @ffi.Size()
  external int quota_size;

  @ffi.Size()
  external int preallocation_size;

  @ffi.Size()
  external int slab_size;

  @ffi.Size()
  external int static_buffers_capacity;

  @ffi.Size()
  external int static_buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.Int32()
  external int ring_flags;

  @ffi.Uint32()
  external int completion_wait_count;
}

final class executor_scheduler_configuration extends ffi.Struct {
  @ffi.Size()
  external int ring_size;

  @ffi.Size()
  external int ring_flags;

  @ffi.Uint64()
  external int initialization_timeout_seconds;

  @ffi.Uint64()
  external int shutdown_timeout_seconds;

  @ffi.Bool()
  external bool trace;
}

final class executor_task extends ffi.Struct {
  @ffi.Uint64()
  external int id;

  @ffi.Uint64()
  external int source;

  @ffi.Uint64()
  external int target;

  @ffi.Uint64()
  external int owner;

  @ffi.Uint64()
  external int method;

  external ffi.Pointer<ffi.Void> input;

  @ffi.Size()
  external int input_size;

  external ffi.Pointer<ffi.Void> output;

  @ffi.Size()
  external int output_size;

  @ffi.Uint16()
  external int flags;
}

final class executor_completion_event extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int user_data;

  @ffi.Int()
  external int res;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedLongLong> big_cqe;
}

final class io_uring extends ffi.Opaque {}

final class io_uring_cqe extends ffi.Opaque {}

final class executor extends ffi.Struct {
  @ffi.Int64()
  external int callback;

  external ffi.Pointer<executor_scheduler> notifier;

  external ffi.Pointer<io_uring> ring;

  external ffi.Pointer<ffi.Pointer<executor_completion_event>> completions;

  external executor_configuration configuration;

  @ffi.Int32()
  external int descriptor;

  @ffi.Uint32()
  external int id;

  @ffi.Int8()
  external int state;
}

final class executor_scheduler extends ffi.Struct {
  external executor_scheduler_configuration configuration;

  external ffi.Pointer<ffi.Char> initialization_error;

  external ffi.Pointer<ffi.Char> shutdown_error;

  external ffi.Pointer<executor_scheduler_thread> thread;

  external ffi.Pointer<io_uring> ring;

  @ffi.Bool()
  external bool active;

  @ffi.Bool()
  external bool initialized;

  @ffi.Int32()
  external int descriptor;
}

final class executor_scheduler_thread extends ffi.Opaque {}

typedef executor_completion_event = io_uring_cqe;
