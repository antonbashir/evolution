// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field
import 'dart:ffi' as ffi;
import 'package:interactor/interactor.dart' as interactor;

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'remove', assetId: 'transport-bindings')
external int remove(
  ffi.Pointer<ffi.Char> __filename,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'rename', assetId: 'transport-bindings')
external int rename(
  ffi.Pointer<ffi.Char> __old,
  ffi.Pointer<ffi.Char> __new,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'renameat', assetId: 'transport-bindings')
external int renameat(
  int __oldfd,
  ffi.Pointer<ffi.Char> __old,
  int __newfd,
  ffi.Pointer<ffi.Char> __new,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fclose', assetId: 'transport-bindings')
external int fclose(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Pointer<FILE> Function()>(
    symbol: 'tmpfile', assetId: 'transport-bindings')
external ffi.Pointer<FILE> tmpfile();

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'tmpnam', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> tmpnam(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'tmpnam_r', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> tmpnam_r(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'tempnam', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> tempnam(
  ffi.Pointer<ffi.Char> __dir,
  ffi.Pointer<ffi.Char> __pfx,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fflush', assetId: 'transport-bindings')
external int fflush(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fflush_unlocked', assetId: 'transport-bindings')
external int fflush_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>)>(symbol: 'fopen', assetId: 'transport-bindings')
external ffi.Pointer<FILE> fopen(
  ffi.Pointer<ffi.Char> __filename,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<
    ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<FILE>)>(symbol: 'freopen', assetId: 'transport-bindings')
external ffi.Pointer<FILE> freopen(
  ffi.Pointer<ffi.Char> __filename,
  ffi.Pointer<ffi.Char> __modes,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Pointer<FILE> Function(ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'fdopen', assetId: 'transport-bindings')
external ffi.Pointer<FILE> fdopen(
  int __fd,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
            cookie_io_functions_t)>(
    symbol: 'fopencookie', assetId: 'transport-bindings')
external ffi.Pointer<FILE> fopencookie(
  ffi.Pointer<ffi.Void> __magic_cookie,
  ffi.Pointer<ffi.Char> __modes,
  cookie_io_functions_t __io_funcs,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Char>)>(
    symbol: 'fmemopen', assetId: 'transport-bindings')
external ffi.Pointer<FILE> fmemopen(
  ffi.Pointer<ffi.Void> __s,
  int __len,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>(
    symbol: 'open_memstream', assetId: 'transport-bindings')
external ffi.Pointer<FILE> open_memstream(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
  ffi.Pointer<ffi.Size> __sizeloc,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
    symbol: 'setbuf', assetId: 'transport-bindings')
external void setbuf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __buf,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
        ffi.Size)>(symbol: 'setvbuf', assetId: 'transport-bindings')
external int setvbuf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __buf,
  int __modes,
  int __n,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'setbuffer', assetId: 'transport-bindings')
external void setbuffer(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __buf,
  int __size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'setlinebuf', assetId: 'transport-bindings')
external void setlinebuf(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
    symbol: 'fprintf', assetId: 'transport-bindings')
external int fprintf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'printf', assetId: 'transport-bindings')
external int printf(
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'sprintf', assetId: 'transport-bindings')
external int sprintf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vfprintf', assetId: 'transport-bindings')
external int vfprintf(
  ffi.Pointer<FILE> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vprintf', assetId: 'transport-bindings')
external int vprintf(
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vsprintf', assetId: 'transport-bindings')
external int vsprintf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>)>(
    symbol: 'snprintf', assetId: 'transport-bindings')
external int snprintf(
  ffi.Pointer<ffi.Char> __s,
  int __maxlen,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vsnprintf', assetId: 'transport-bindings')
external int vsnprintf(
  ffi.Pointer<ffi.Char> __s,
  int __maxlen,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vasprintf', assetId: 'transport-bindings')
external int vasprintf(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
  ffi.Pointer<ffi.Char> __f,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>(
    symbol: 'asprintf', assetId: 'transport-bindings')
external int asprintf(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
  ffi.Pointer<ffi.Char> __fmt,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vdprintf', assetId: 'transport-bindings')
external int vdprintf(
  int __fd,
  ffi.Pointer<ffi.Char> __fmt,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'dprintf', assetId: 'transport-bindings')
external int dprintf(
  int __fd,
  ffi.Pointer<ffi.Char> __fmt,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
    symbol: 'fscanf', assetId: 'transport-bindings')
external int fscanf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'scanf', assetId: 'transport-bindings')
external int scanf(
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'sscanf', assetId: 'transport-bindings')
external int sscanf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vfscanf', assetId: 'transport-bindings')
external int vfscanf(
  ffi.Pointer<FILE> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vscanf', assetId: 'transport-bindings')
external int vscanf(
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vsscanf', assetId: 'transport-bindings')
external int vsscanf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fgetc', assetId: 'transport-bindings')
external int fgetc(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'getc', assetId: 'transport-bindings')
external int getc(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'getchar', assetId: 'transport-bindings')
external int getchar();

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'getc_unlocked', assetId: 'transport-bindings')
external int getc_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'getchar_unlocked', assetId: 'transport-bindings')
external int getchar_unlocked();

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fgetc_unlocked', assetId: 'transport-bindings')
external int fgetc_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'fputc', assetId: 'transport-bindings')
external int fputc(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'putc', assetId: 'transport-bindings')
external int putc(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'putchar', assetId: 'transport-bindings')
external int putchar(
  int __c,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'fputc_unlocked', assetId: 'transport-bindings')
external int fputc_unlocked(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'putc_unlocked', assetId: 'transport-bindings')
external int putc_unlocked(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'putchar_unlocked', assetId: 'transport-bindings')
external int putchar_unlocked(
  int __c,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'getw', assetId: 'transport-bindings')
external int getw(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'putw', assetId: 'transport-bindings')
external int putw(
  int __w,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int,
        ffi.Pointer<FILE>)>(symbol: 'fgets', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> fgets(
  ffi.Pointer<ffi.Char> __s,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.Long Function(
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Pointer<ffi.Size>,
        ffi.Int,
        ffi.Pointer<FILE>)>(symbol: 'getdelim', assetId: 'transport-bindings')
external int getdelim(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
  ffi.Pointer<ffi.Size> __n,
  int __delimiter,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.Long Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
        ffi.Pointer<FILE>)>(symbol: 'getline', assetId: 'transport-bindings')
external int getline(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
  ffi.Pointer<ffi.Size> __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>(
    symbol: 'fputs', assetId: 'transport-bindings')
external int fputs(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'puts', assetId: 'transport-bindings')
external int puts(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'ungetc', assetId: 'transport-bindings')
external int ungetc(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
        ffi.Pointer<FILE>)>(symbol: 'fread', assetId: 'transport-bindings')
external int fread(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
        ffi.Pointer<FILE>)>(symbol: 'fwrite', assetId: 'transport-bindings')
external int fwrite(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __s,
);

@ffi.Native<
        ffi.Size Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<FILE>)>(
    symbol: 'fread_unlocked', assetId: 'transport-bindings')
external int fread_unlocked(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        ffi.Size Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<FILE>)>(
    symbol: 'fwrite_unlocked', assetId: 'transport-bindings')
external int fwrite_unlocked(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>(
    symbol: 'fseek', assetId: 'transport-bindings')
external int fseek(
  ffi.Pointer<FILE> __stream,
  int __off,
  int __whence,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<FILE>)>(
    symbol: 'ftell', assetId: 'transport-bindings')
external int ftell(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'rewind', assetId: 'transport-bindings')
external void rewind(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>(
    symbol: 'fseeko', assetId: 'transport-bindings')
external int fseeko(
  ffi.Pointer<FILE> __stream,
  int __off,
  int __whence,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<FILE>)>(
    symbol: 'ftello', assetId: 'transport-bindings')
external int ftello(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>(
    symbol: 'fgetpos', assetId: 'transport-bindings')
external int fgetpos(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<fpos_t> __pos,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>(
    symbol: 'fsetpos', assetId: 'transport-bindings')
external int fsetpos(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<fpos_t> __pos,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'clearerr', assetId: 'transport-bindings')
external void clearerr(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'feof', assetId: 'transport-bindings')
external int feof(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'ferror', assetId: 'transport-bindings')
external int ferror(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'clearerr_unlocked', assetId: 'transport-bindings')
external void clearerr_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'feof_unlocked', assetId: 'transport-bindings')
external int feof_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'ferror_unlocked', assetId: 'transport-bindings')
external int ferror_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'perror', assetId: 'transport-bindings')
external void perror(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fileno', assetId: 'transport-bindings')
external int fileno(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fileno_unlocked', assetId: 'transport-bindings')
external int fileno_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'pclose', assetId: 'transport-bindings')
external int pclose(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>)>(symbol: 'popen', assetId: 'transport-bindings')
external ffi.Pointer<FILE> popen(
  ffi.Pointer<ffi.Char> __command,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'ctermid', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> ctermid(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'flockfile', assetId: 'transport-bindings')
external void flockfile(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'ftrylockfile', assetId: 'transport-bindings')
external int ftrylockfile(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'funlockfile', assetId: 'transport-bindings')
external void funlockfile(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_client_t>,
            ffi.Pointer<transport_client_configuration_t>,
            ffi.Pointer<ffi.Char>,
            ffi.Int32)>(
    symbol: 'transport_client_initialize_tcp',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_client_initialize_tcp(
  ffi.Pointer<transport_client_t> client,
  ffi.Pointer<transport_client_configuration_t> configuration,
  ffi.Pointer<ffi.Char> ip,
  int port,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_client_t>,
            ffi.Pointer<transport_client_configuration_t>,
            ffi.Pointer<ffi.Char>,
            ffi.Int32,
            ffi.Pointer<ffi.Char>,
            ffi.Int32)>(
    symbol: 'transport_client_initialize_udp',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_client_initialize_udp(
  ffi.Pointer<transport_client_t> client,
  ffi.Pointer<transport_client_configuration_t> configuration,
  ffi.Pointer<ffi.Char> destination_ip,
  int destination_port,
  ffi.Pointer<ffi.Char> source_ip,
  int source_port,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_client_t>,
            ffi.Pointer<transport_client_configuration_t>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'transport_client_initialize_unix_stream',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_client_initialize_unix_stream(
  ffi.Pointer<transport_client_t> client,
  ffi.Pointer<transport_client_configuration_t> configuration,
  ffi.Pointer<ffi.Char> path,
);

@ffi.Native<ffi.Pointer<sockaddr> Function(ffi.Pointer<transport_client_t>)>(
    symbol: 'transport_client_get_destination_address',
    assetId: 'transport-bindings',
    isLeaf: true)
external ffi.Pointer<sockaddr> transport_client_get_destination_address(
  ffi.Pointer<transport_client_t> client,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_client_t>)>(
    symbol: 'transport_client_destroy',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_client_destroy(
  ffi.Pointer<transport_client_t> client,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_server_t>,
            ffi.Pointer<transport_server_configuration_t>,
            ffi.Pointer<ffi.Char>,
            ffi.Int32)>(
    symbol: 'transport_server_initialize_tcp',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_server_initialize_tcp(
  ffi.Pointer<transport_server_t> server,
  ffi.Pointer<transport_server_configuration_t> configuration,
  ffi.Pointer<ffi.Char> ip,
  int port,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_server_t>,
            ffi.Pointer<transport_server_configuration_t>,
            ffi.Pointer<ffi.Char>,
            ffi.Int32)>(
    symbol: 'transport_server_initialize_udp',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_server_initialize_udp(
  ffi.Pointer<transport_server_t> server,
  ffi.Pointer<transport_server_configuration_t> configuration,
  ffi.Pointer<ffi.Char> ip,
  int port,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_server_t>,
            ffi.Pointer<transport_server_configuration_t>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'transport_server_initialize_unix_stream',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_server_initialize_unix_stream(
  ffi.Pointer<transport_server_t> server,
  ffi.Pointer<transport_server_configuration_t> configuration,
  ffi.Pointer<ffi.Char> path,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_server_t>)>(
    symbol: 'transport_server_destroy',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_server_destroy(
  ffi.Pointer<transport_server_t> server,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<transport_t>,
            ffi.Pointer<transport_configuration_t>, ffi.Uint8)>(
    symbol: 'transport_initialize', assetId: 'transport-bindings', isLeaf: true)
external int transport_initialize(
  ffi.Pointer<transport_t> worker,
  ffi.Pointer<transport_configuration_t> configuration,
  int id,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<transport_t>, ffi.Uint32, ffi.Uint16,
            ffi.Uint32, ffi.Int64, ffi.Uint16, ffi.Uint8)>(
    symbol: 'transport_write', assetId: 'transport-bindings', isLeaf: true)
external void transport_write(
  ffi.Pointer<transport_t> worker,
  int fd,
  int buffer_id,
  int offset,
  int timeout,
  int event,
  int sqe_flags,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<transport_t>, ffi.Uint32, ffi.Uint16,
            ffi.Uint32, ffi.Int64, ffi.Uint16, ffi.Uint8)>(
    symbol: 'transport_read', assetId: 'transport-bindings', isLeaf: true)
external void transport_read(
  ffi.Pointer<transport_t> worker,
  int fd,
  int buffer_id,
  int offset,
  int timeout,
  int event,
  int sqe_flags,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<transport_t>,
            ffi.Uint32,
            ffi.Uint16,
            ffi.Pointer<sockaddr>,
            ffi.Int32,
            ffi.Int,
            ffi.Int64,
            ffi.Uint16,
            ffi.Uint8)>(
    symbol: 'transport_send_message',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_send_message(
  ffi.Pointer<transport_t> worker,
  int fd,
  int buffer_id,
  ffi.Pointer<sockaddr> address,
  int socket_family,
  int message_flags,
  int timeout,
  int event,
  int sqe_flags,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<transport_t>, ffi.Uint32, ffi.Uint16,
            ffi.Int32, ffi.Int, ffi.Int64, ffi.Uint16, ffi.Uint8)>(
    symbol: 'transport_receive_message',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_receive_message(
  ffi.Pointer<transport_t> worker,
  int fd,
  int buffer_id,
  int socket_family,
  int message_flags,
  int timeout,
  int event,
  int sqe_flags,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<transport_t>,
            ffi.Pointer<transport_client_t>, ffi.Int64)>(
    symbol: 'transport_connect', assetId: 'transport-bindings', isLeaf: true)
external void transport_connect(
  ffi.Pointer<transport_t> worker,
  ffi.Pointer<transport_client_t> client,
  int timeout,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<transport_t>, ffi.Pointer<transport_server_t>)>(
    symbol: 'transport_accept', assetId: 'transport-bindings', isLeaf: true)
external void transport_accept(
  ffi.Pointer<transport_t> worker,
  ffi.Pointer<transport_server_t> server,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_t>, ffi.Int)>(
    symbol: 'transport_cancel_by_fd',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_cancel_by_fd(
  ffi.Pointer<transport_t> worker,
  int fd,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_t>)>(
    symbol: 'transport_check_event_timeouts',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_check_event_timeouts(
  ffi.Pointer<transport_t> worker,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_t>, ffi.Uint64)>(
    symbol: 'transport_remove_event',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_remove_event(
  ffi.Pointer<transport_t> worker,
  int data,
);

@ffi.Native<
        ffi.Pointer<sockaddr> Function(
            ffi.Pointer<transport_t>, ffi.Int32, ffi.Int)>(
    symbol: 'transport_get_datagram_address',
    assetId: 'transport-bindings',
    isLeaf: true)
external ffi.Pointer<sockaddr> transport_get_datagram_address(
  ffi.Pointer<transport_t> worker,
  int socket_family,
  int buffer_id,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<transport_t>)>(
    symbol: 'transport_peek', assetId: 'transport-bindings', isLeaf: true)
external int transport_peek(
  ffi.Pointer<transport_t> worker,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_t>)>(
    symbol: 'transport_destroy', assetId: 'transport-bindings', isLeaf: true)
external void transport_destroy(
  ffi.Pointer<transport_t> worker,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_io_uring>, ffi.Int)>(
    symbol: 'transport_cqe_advance',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_cqe_advance(
  ffi.Pointer<transport_io_uring> ring,
  int count,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Bool, ffi.Bool)>(
    symbol: 'transport_file_open', assetId: 'transport-bindings', isLeaf: true)
external int transport_file_open(
  ffi.Pointer<ffi.Char> path,
  int mode,
  bool truncate,
  bool create,
);

@ffi.Native<
        ffi.Int64 Function(
            ffi.Uint64,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint16,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint16)>(
    symbol: 'transport_socket_create_tcp',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_socket_create_tcp(
  int flags,
  int socket_receive_buffer_size,
  int socket_send_buffer_size,
  int socket_receive_low_at,
  int socket_send_low_at,
  int ip_ttl,
  int tcp_keep_alive_idle,
  int tcp_keep_alive_max_count,
  int tcp_keep_alive_individual_count,
  int tcp_max_segment_size,
  int tcp_syn_count,
);

@ffi.Native<
        ffi.Int64 Function(ffi.Uint64, ffi.Uint32, ffi.Uint32, ffi.Uint32,
            ffi.Uint32, ffi.Uint16, ffi.Pointer<ip_mreqn>, ffi.Uint32)>(
    symbol: 'transport_socket_create_udp',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_socket_create_udp(
  int flags,
  int socket_receive_buffer_size,
  int socket_send_buffer_size,
  int socket_receive_low_at,
  int socket_send_low_at,
  int ip_ttl,
  ffi.Pointer<ip_mreqn> ip_multicast_interface,
  int ip_multicast_ttl,
);

@ffi.Native<
        ffi.Int64 Function(
            ffi.Uint64, ffi.Uint32, ffi.Uint32, ffi.Uint32, ffi.Uint32)>(
    symbol: 'transport_socket_create_unix_stream',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_socket_create_unix_stream(
  int flags,
  int socket_receive_buffer_size,
  int socket_send_buffer_size,
  int socket_receive_low_at,
  int socket_send_low_at,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ip_mreqn>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'transport_socket_initialize_multicast_request',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_socket_initialize_multicast_request(
  ffi.Pointer<ip_mreqn> request,
  ffi.Pointer<ffi.Char> group_address,
  ffi.Pointer<ffi.Char> local_address,
  int interface_index,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'transport_socket_multicast_add_membership',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_socket_multicast_add_membership(
  int fd,
  ffi.Pointer<ffi.Char> group_address,
  ffi.Pointer<ffi.Char> local_address,
  int interface_index,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'transport_socket_multicast_drop_membership',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_socket_multicast_drop_membership(
  int fd,
  ffi.Pointer<ffi.Char> group_address,
  ffi.Pointer<ffi.Char> local_address,
  int interface_index,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'transport_socket_multicast_add_source_membership',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_socket_multicast_add_source_membership(
  int fd,
  ffi.Pointer<ffi.Char> group_address,
  ffi.Pointer<ffi.Char> local_address,
  ffi.Pointer<ffi.Char> source_address,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'transport_socket_multicast_drop_source_membership',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_socket_multicast_drop_source_membership(
  int fd,
  ffi.Pointer<ffi.Char> group_address,
  ffi.Pointer<ffi.Char> local_address,
  ffi.Pointer<ffi.Char> source_address,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'transport_socket_get_interface_index',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_socket_get_interface_index(
  ffi.Pointer<ffi.Char> interface1,
);

typedef FILE = _IO_FILE;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @ffi.Long()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<ffi.Void> _lock;

  @ffi.Long()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

typedef cookie_io_functions_t = _IO_cookie_io_functions_t;

final class _IO_cookie_io_functions_t extends ffi.Struct {
  external ffi.Pointer<cookie_read_function_t> read;

  external ffi.Pointer<cookie_write_function_t> write;

  external ffi.Pointer<cookie_seek_function_t> seek;

  external ffi.Pointer<cookie_close_function_t> close;
}

typedef cookie_read_function_t = ffi.NativeFunction<
    ffi.Long Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Size __nbytes)>;
typedef cookie_write_function_t = ffi.NativeFunction<
    ffi.Long Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Size __nbytes)>;
typedef cookie_seek_function_t = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Long> __pos, ffi.Int __w)>;
typedef cookie_close_function_t
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> __cookie)>;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef fpos_t = _G_fpos_t;

final class _G_fpos_t extends ffi.Struct {
  @ffi.Long()
  external int __pos;

  external __mbstate_t __state;
}

final class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion1 __value;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

abstract class transport_socket_family {
  static const int INET = 0;
  static const int UNIX = 1;
}

final class sockaddr_in extends ffi.Opaque {}

final class sockaddr_un extends ffi.Opaque {}

final class transport_client_configuration extends ffi.Struct {
  @ffi.Uint64()
  external int socket_configuration_flags;

  @ffi.Uint32()
  external int socket_receive_buffer_size;

  @ffi.Uint32()
  external int socket_send_buffer_size;

  @ffi.Uint32()
  external int socket_receive_low_at;

  @ffi.Uint32()
  external int socket_send_low_at;

  @ffi.Uint16()
  external int ip_ttl;

  @ffi.Uint32()
  external int tcp_keep_alive_idle;

  @ffi.Uint32()
  external int tcp_keep_alive_max_count;

  @ffi.Uint32()
  external int tcp_keep_alive_individual_count;

  @ffi.Uint32()
  external int tcp_max_segment_size;

  @ffi.Uint16()
  external int tcp_syn_count;

  external ffi.Pointer<ip_mreqn> ip_multicast_interface;

  @ffi.Uint32()
  external int ip_multicast_ttl;
}

final class ip_mreqn extends ffi.Opaque {}

final class transport_client extends ffi.Struct {
  @ffi.Int()
  external int fd;

  external ffi.Pointer<sockaddr_in> inet_destination_address;

  external ffi.Pointer<sockaddr_in> inet_source_address;

  external ffi.Pointer<sockaddr_un> unix_destination_address;

  @ffi.UnsignedInt()
  external int client_address_length;

  @ffi.Int32()
  external int family;
}

typedef transport_client_t = transport_client;
typedef transport_client_configuration_t = transport_client_configuration;

final class sockaddr extends ffi.Opaque {}

final class transport_server_configuration extends ffi.Struct {
  @ffi.Int32()
  external int socket_max_connections;

  @ffi.Uint64()
  external int socket_configuration_flags;

  @ffi.Uint32()
  external int socket_receive_buffer_size;

  @ffi.Uint32()
  external int socket_send_buffer_size;

  @ffi.Uint32()
  external int socket_receive_low_at;

  @ffi.Uint32()
  external int socket_send_low_at;

  @ffi.Uint16()
  external int ip_ttl;

  @ffi.Uint32()
  external int tcp_keep_alive_idle;

  @ffi.Uint32()
  external int tcp_keep_alive_max_count;

  @ffi.Uint32()
  external int tcp_keep_alive_individual_count;

  @ffi.Uint32()
  external int tcp_max_segment_size;

  @ffi.Uint16()
  external int tcp_syn_count;

  external ffi.Pointer<ip_mreqn> ip_multicast_interface;

  @ffi.Uint32()
  external int ip_multicast_ttl;
}

final class transport_server extends ffi.Struct {
  @ffi.Int()
  external int fd;

  @ffi.Int32()
  external int family;

  external ffi.Pointer<sockaddr_in> inet_server_address;

  external ffi.Pointer<sockaddr_un> unix_server_address;

  @ffi.UnsignedInt()
  external int server_address_length;
}

typedef transport_server_t = transport_server;
typedef transport_server_configuration_t = transport_server_configuration;

final class io_uring extends ffi.Opaque {}

final class memory_static_buffers extends ffi.Opaque {}

final class mh_events_t extends ffi.Opaque {}

final class transport_configuration extends ffi.Struct {
  @ffi.Uint16()
  external int buffers_count;

  @ffi.Uint32()
  external int buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.UnsignedInt()
  external int ring_flags;

  @ffi.Uint64()
  external int timeout_checker_period_millis;

  @ffi.Uint32()
  external int base_delay_micros;

  @ffi.Double()
  external double delay_randomization_factor;

  @ffi.Uint64()
  external int max_delay_micros;

  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;

  @ffi.Bool()
  external bool trace;
}

final class transport extends ffi.Struct {
  @ffi.Uint8()
  external int id;

  external ffi.Pointer<memory_static_buffers> free_buffers;

  external ffi.Pointer<io_uring> ring;

  external ffi.Pointer<iovec> buffers;

  @ffi.Uint32()
  external int buffer_size;

  @ffi.Uint16()
  external int buffers_count;

  @ffi.Uint64()
  external int timeout_checker_period_millis;

  @ffi.Uint32()
  external int base_delay_micros;

  @ffi.Double()
  external double delay_randomization_factor;

  @ffi.Uint64()
  external int max_delay_micros;

  external ffi.Pointer<msghdr> inet_used_messages;

  external ffi.Pointer<msghdr> unix_used_messages;

  external ffi.Pointer<mh_events_t> events;

  @ffi.Size()
  external int ring_size;

  @ffi.Int()
  external int ring_flags;

  external ffi.Pointer<ffi.Pointer<interactor.interactor_completion_event>>
      cqes;

  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;

  @ffi.Int32()
  external int descriptor;

  @ffi.Bool()
  external bool trace;
}

final class iovec extends ffi.Opaque {}

final class msghdr extends ffi.Opaque {}

typedef transport_t = transport;
typedef transport_configuration_t = transport_configuration;
typedef transport_io_uring = io_uring;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NULL = 0;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int TRANSPORT_EVENT_READ = 1;

const int TRANSPORT_EVENT_WRITE = 2;

const int TRANSPORT_EVENT_RECEIVE_MESSAGE = 4;

const int TRANSPORT_EVENT_SEND_MESSAGE = 8;

const int TRANSPORT_EVENT_ACCEPT = 16;

const int TRANSPORT_EVENT_CONNECT = 32;

const int TRANSPORT_EVENT_CLIENT = 64;

const int TRANSPORT_EVENT_FILE = 128;

const int TRANSPORT_EVENT_SERVER = 256;

const int TRANSPORT_READ_ONLY = 1;

const int TRANSPORT_WRITE_ONLY = 2;

const int TRANSPORT_READ_WRITE = 4;

const int TRANSPORT_WRITE_ONLY_APPEND = 8;

const int TRANSPORT_READ_WRITE_APPEND = 16;

const int TRANSPORT_BUFFER_USED = -1;

const int TRANSPORT_TIMEOUT_INFINITY = -1;

const int TRANSPORT_SOCKET_OPTION_SOCKET_NONBLOCK = 2;

const int TRANSPORT_SOCKET_OPTION_SOCKET_CLOCEXEC = 4;

const int TRANSPORT_SOCKET_OPTION_SOCKET_REUSEADDR = 8;

const int TRANSPORT_SOCKET_OPTION_SOCKET_REUSEPORT = 16;

const int TRANSPORT_SOCKET_OPTION_SOCKET_RCVBUF = 32;

const int TRANSPORT_SOCKET_OPTION_SOCKET_SNDBUF = 64;

const int TRANSPORT_SOCKET_OPTION_SOCKET_BROADCAST = 128;

const int TRANSPORT_SOCKET_OPTION_SOCKET_KEEPALIVE = 256;

const int TRANSPORT_SOCKET_OPTION_SOCKET_RCVLOWAT = 512;

const int TRANSPORT_SOCKET_OPTION_SOCKET_SNDLOWAT = 1024;

const int TRANSPORT_SOCKET_OPTION_IP_TTL = 2048;

const int TRANSPORT_SOCKET_OPTION_IP_ADD_MEMBERSHIP = 4096;

const int TRANSPORT_SOCKET_OPTION_IP_ADD_SOURCE_MEMBERSHIP = 8192;

const int TRANSPORT_SOCKET_OPTION_IP_DROP_MEMBERSHIP = 16384;

const int TRANSPORT_SOCKET_OPTION_IP_DROP_SOURCE_MEMBERSHIP = 32768;

const int TRANSPORT_SOCKET_OPTION_IP_FREEBIND = 65536;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_ALL = 131072;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_IF = 262144;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_LOOP = 524288;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_TTL = 1048576;

const int TRANSPORT_SOCKET_OPTION_TCP_QUICKACK = 2097152;

const int TRANSPORT_SOCKET_OPTION_TCP_DEFER_ACCEPT = 4194304;

const int TRANSPORT_SOCKET_OPTION_TCP_FASTOPEN = 8388608;

const int TRANSPORT_SOCKET_OPTION_TCP_KEEPIDLE = 16777216;

const int TRANSPORT_SOCKET_OPTION_TCP_KEEPCNT = 33554432;

const int TRANSPORT_SOCKET_OPTION_TCP_KEEPINTVL = 67108864;

const int TRANSPORT_SOCKET_OPTION_TCP_MAXSEG = 134217728;

const int TRANSPORT_SOCKET_OPTION_TCP_NODELAY = 268435456;

const int TRANSPORT_SOCKET_OPTION_TCP_SYNCNT = 536870912;
