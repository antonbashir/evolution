// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field
import 'dart:ffi' as ffi;

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_io_uring>, ffi.Int)>(
    symbol: 'transport_cqe_advance', assetId: 'transport-bindings')
external void transport_cqe_advance(
  ffi.Pointer<transport_io_uring> ring,
  int count,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: 'transport_close_descriptor', assetId: 'transport-bindings')
external void transport_close_descriptor(
  int fd,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'remove', assetId: 'transport-bindings')
external int remove(
  ffi.Pointer<ffi.Char> __filename,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'rename', assetId: 'transport-bindings')
external int rename(
  ffi.Pointer<ffi.Char> __old,
  ffi.Pointer<ffi.Char> __new,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'renameat', assetId: 'transport-bindings')
external int renameat(
  int __oldfd,
  ffi.Pointer<ffi.Char> __old,
  int __newfd,
  ffi.Pointer<ffi.Char> __new,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fclose', assetId: 'transport-bindings')
external int fclose(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Pointer<FILE> Function()>(
    symbol: 'tmpfile', assetId: 'transport-bindings')
external ffi.Pointer<FILE> tmpfile();

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'tmpnam', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> tmpnam(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'tmpnam_r', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> tmpnam_r(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'tempnam', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> tempnam(
  ffi.Pointer<ffi.Char> __dir,
  ffi.Pointer<ffi.Char> __pfx,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fflush', assetId: 'transport-bindings')
external int fflush(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fflush_unlocked', assetId: 'transport-bindings')
external int fflush_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>)>(symbol: 'fopen', assetId: 'transport-bindings')
external ffi.Pointer<FILE> fopen(
  ffi.Pointer<ffi.Char> __filename,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<
    ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<FILE>)>(symbol: 'freopen', assetId: 'transport-bindings')
external ffi.Pointer<FILE> freopen(
  ffi.Pointer<ffi.Char> __filename,
  ffi.Pointer<ffi.Char> __modes,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Pointer<FILE> Function(ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'fdopen', assetId: 'transport-bindings')
external ffi.Pointer<FILE> fdopen(
  int __fd,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
            cookie_io_functions_t)>(
    symbol: 'fopencookie', assetId: 'transport-bindings')
external ffi.Pointer<FILE> fopencookie(
  ffi.Pointer<ffi.Void> __magic_cookie,
  ffi.Pointer<ffi.Char> __modes,
  cookie_io_functions_t __io_funcs,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Char>)>(
    symbol: 'fmemopen', assetId: 'transport-bindings')
external ffi.Pointer<FILE> fmemopen(
  ffi.Pointer<ffi.Void> __s,
  int __len,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>(
    symbol: 'open_memstream', assetId: 'transport-bindings')
external ffi.Pointer<FILE> open_memstream(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
  ffi.Pointer<ffi.Size> __sizeloc,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
    symbol: 'setbuf', assetId: 'transport-bindings')
external void setbuf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __buf,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
        ffi.Size)>(symbol: 'setvbuf', assetId: 'transport-bindings')
external int setvbuf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __buf,
  int __modes,
  int __n,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'setbuffer', assetId: 'transport-bindings')
external void setbuffer(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __buf,
  int __size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'setlinebuf', assetId: 'transport-bindings')
external void setlinebuf(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
    symbol: 'fprintf', assetId: 'transport-bindings')
external int fprintf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'printf', assetId: 'transport-bindings')
external int printf(
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'sprintf', assetId: 'transport-bindings')
external int sprintf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vfprintf', assetId: 'transport-bindings')
external int vfprintf(
  ffi.Pointer<FILE> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vprintf', assetId: 'transport-bindings')
external int vprintf(
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vsprintf', assetId: 'transport-bindings')
external int vsprintf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>)>(
    symbol: 'snprintf', assetId: 'transport-bindings')
external int snprintf(
  ffi.Pointer<ffi.Char> __s,
  int __maxlen,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vsnprintf', assetId: 'transport-bindings')
external int vsnprintf(
  ffi.Pointer<ffi.Char> __s,
  int __maxlen,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vasprintf', assetId: 'transport-bindings')
external int vasprintf(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
  ffi.Pointer<ffi.Char> __f,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>(
    symbol: 'asprintf', assetId: 'transport-bindings')
external int asprintf(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
  ffi.Pointer<ffi.Char> __fmt,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vdprintf', assetId: 'transport-bindings')
external int vdprintf(
  int __fd,
  ffi.Pointer<ffi.Char> __fmt,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'dprintf', assetId: 'transport-bindings')
external int dprintf(
  int __fd,
  ffi.Pointer<ffi.Char> __fmt,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
    symbol: 'fscanf', assetId: 'transport-bindings')
external int fscanf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'scanf', assetId: 'transport-bindings')
external int scanf(
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'sscanf', assetId: 'transport-bindings')
external int sscanf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vfscanf', assetId: 'transport-bindings')
external int vfscanf(
  ffi.Pointer<FILE> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vscanf', assetId: 'transport-bindings')
external int vscanf(
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vsscanf', assetId: 'transport-bindings')
external int vsscanf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fgetc', assetId: 'transport-bindings')
external int fgetc(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'getc', assetId: 'transport-bindings')
external int getc(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'getchar', assetId: 'transport-bindings')
external int getchar();

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'getc_unlocked', assetId: 'transport-bindings')
external int getc_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'getchar_unlocked', assetId: 'transport-bindings')
external int getchar_unlocked();

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fgetc_unlocked', assetId: 'transport-bindings')
external int fgetc_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'fputc', assetId: 'transport-bindings')
external int fputc(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'putc', assetId: 'transport-bindings')
external int putc(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'putchar', assetId: 'transport-bindings')
external int putchar(
  int __c,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'fputc_unlocked', assetId: 'transport-bindings')
external int fputc_unlocked(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'putc_unlocked', assetId: 'transport-bindings')
external int putc_unlocked(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'putchar_unlocked', assetId: 'transport-bindings')
external int putchar_unlocked(
  int __c,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'getw', assetId: 'transport-bindings')
external int getw(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'putw', assetId: 'transport-bindings')
external int putw(
  int __w,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int,
        ffi.Pointer<FILE>)>(symbol: 'fgets', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> fgets(
  ffi.Pointer<ffi.Char> __s,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.Long Function(
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Pointer<ffi.Size>,
        ffi.Int,
        ffi.Pointer<FILE>)>(symbol: 'getdelim', assetId: 'transport-bindings')
external int getdelim(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
  ffi.Pointer<ffi.Size> __n,
  int __delimiter,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.Long Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
        ffi.Pointer<FILE>)>(symbol: 'getline', assetId: 'transport-bindings')
external int getline(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
  ffi.Pointer<ffi.Size> __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>(
    symbol: 'fputs', assetId: 'transport-bindings')
external int fputs(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'puts', assetId: 'transport-bindings')
external int puts(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'ungetc', assetId: 'transport-bindings')
external int ungetc(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
        ffi.Pointer<FILE>)>(symbol: 'fread', assetId: 'transport-bindings')
external int fread(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
        ffi.Pointer<FILE>)>(symbol: 'fwrite', assetId: 'transport-bindings')
external int fwrite(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __s,
);

@ffi.Native<
        ffi.Size Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<FILE>)>(
    symbol: 'fread_unlocked', assetId: 'transport-bindings')
external int fread_unlocked(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        ffi.Size Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<FILE>)>(
    symbol: 'fwrite_unlocked', assetId: 'transport-bindings')
external int fwrite_unlocked(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>(
    symbol: 'fseek', assetId: 'transport-bindings')
external int fseek(
  ffi.Pointer<FILE> __stream,
  int __off,
  int __whence,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<FILE>)>(
    symbol: 'ftell', assetId: 'transport-bindings')
external int ftell(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'rewind', assetId: 'transport-bindings')
external void rewind(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>(
    symbol: 'fseeko', assetId: 'transport-bindings')
external int fseeko(
  ffi.Pointer<FILE> __stream,
  int __off,
  int __whence,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<FILE>)>(
    symbol: 'ftello', assetId: 'transport-bindings')
external int ftello(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>(
    symbol: 'fgetpos', assetId: 'transport-bindings')
external int fgetpos(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<fpos_t> __pos,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>(
    symbol: 'fsetpos', assetId: 'transport-bindings')
external int fsetpos(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<fpos_t> __pos,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'clearerr', assetId: 'transport-bindings')
external void clearerr(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'feof', assetId: 'transport-bindings')
external int feof(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'ferror', assetId: 'transport-bindings')
external int ferror(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'clearerr_unlocked', assetId: 'transport-bindings')
external void clearerr_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'feof_unlocked', assetId: 'transport-bindings')
external int feof_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'ferror_unlocked', assetId: 'transport-bindings')
external int ferror_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'perror', assetId: 'transport-bindings')
external void perror(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fileno', assetId: 'transport-bindings')
external int fileno(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fileno_unlocked', assetId: 'transport-bindings')
external int fileno_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'pclose', assetId: 'transport-bindings')
external int pclose(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
    ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>)>(symbol: 'popen', assetId: 'transport-bindings')
external ffi.Pointer<FILE> popen(
  ffi.Pointer<ffi.Char> __command,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'ctermid', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> ctermid(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'flockfile', assetId: 'transport-bindings')
external void flockfile(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'ftrylockfile', assetId: 'transport-bindings')
external int ftrylockfile(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'funlockfile', assetId: 'transport-bindings')
external void funlockfile(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'atof', assetId: 'transport-bindings')
external double atof(
  ffi.Pointer<ffi.Char> __nptr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'atoi', assetId: 'transport-bindings')
external int atoi(
  ffi.Pointer<ffi.Char> __nptr,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'atol', assetId: 'transport-bindings')
external int atol(
  ffi.Pointer<ffi.Char> __nptr,
);

@ffi.Native<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'atoll', assetId: 'transport-bindings')
external int atoll(
  ffi.Pointer<ffi.Char> __nptr,
);

@ffi.Native<
        ffi.Double Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'strtod', assetId: 'transport-bindings')
external double strtod(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
);

@ffi.Native<
        ffi.Float Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'strtof', assetId: 'transport-bindings')
external double strtof(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
);

@ffi.Native<
    ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtol', assetId: 'transport-bindings')
external int strtol(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    ffi.UnsignedLong Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtoul', assetId: 'transport-bindings')
external int strtoul(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    ffi.LongLong Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtoq', assetId: 'transport-bindings')
external int strtoq(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    ffi.UnsignedLongLong Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtouq', assetId: 'transport-bindings')
external int strtouq(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    ffi.LongLong Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtoll', assetId: 'transport-bindings')
external int strtoll(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    ffi.UnsignedLongLong Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtoull', assetId: 'transport-bindings')
external int strtoull(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Long)>(
    symbol: 'l64a', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> l64a(
  int __n,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'a64l', assetId: 'transport-bindings')
external int a64l(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Int,
        ffi.Pointer<fd_set>,
        ffi.Pointer<fd_set>,
        ffi.Pointer<fd_set>,
        ffi.Pointer<timeval>)>(symbol: 'select', assetId: 'transport-bindings')
external int select(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int,
            ffi.Pointer<fd_set>,
            ffi.Pointer<fd_set>,
            ffi.Pointer<fd_set>,
            ffi.Pointer<timespec>,
            ffi.Pointer<__sigset_t>)>(
    symbol: 'pselect', assetId: 'transport-bindings')
external int pselect(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<__sigset_t> __sigmask,
);

@ffi.Native<ffi.Long Function()>(
    symbol: 'random', assetId: 'transport-bindings')
external int random();

@ffi.Native<ffi.Void Function(ffi.UnsignedInt)>(
    symbol: 'srandom', assetId: 'transport-bindings')
external void srandom(
  int __seed,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'initstate', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> initstate(
  int __seed,
  ffi.Pointer<ffi.Char> __statebuf,
  int __statelen,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'setstate', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> setstate(
  ffi.Pointer<ffi.Char> __statebuf,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>(
    symbol: 'random_r', assetId: 'transport-bindings')
external int random_r(
  ffi.Pointer<random_data> __buf,
  ffi.Pointer<ffi.Int32> __result,
);

@ffi.Native<ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<random_data>)>(
    symbol: 'srandom_r', assetId: 'transport-bindings')
external int srandom_r(
  int __seed,
  ffi.Pointer<random_data> __buf,
);

@ffi.Native<
        ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
            ffi.Pointer<random_data>)>(
    symbol: 'initstate_r', assetId: 'transport-bindings')
external int initstate_r(
  int __seed,
  ffi.Pointer<ffi.Char> __statebuf,
  int __statelen,
  ffi.Pointer<random_data> __buf,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>(
    symbol: 'setstate_r', assetId: 'transport-bindings')
external int setstate_r(
  ffi.Pointer<ffi.Char> __statebuf,
  ffi.Pointer<random_data> __buf,
);

@ffi.Native<ffi.Int Function()>(symbol: 'rand', assetId: 'transport-bindings')
external int rand();

@ffi.Native<ffi.Void Function(ffi.UnsignedInt)>(
    symbol: 'srand', assetId: 'transport-bindings')
external void srand(
  int __seed,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>(
    symbol: 'rand_r', assetId: 'transport-bindings')
external int rand_r(
  ffi.Pointer<ffi.UnsignedInt> __seed,
);

@ffi.Native<ffi.Double Function()>(
    symbol: 'drand48', assetId: 'transport-bindings')
external double drand48();

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>(
    symbol: 'erand48', assetId: 'transport-bindings')
external double erand48(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
);

@ffi.Native<ffi.Long Function()>(
    symbol: 'lrand48', assetId: 'transport-bindings')
external int lrand48();

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>(
    symbol: 'nrand48', assetId: 'transport-bindings')
external int nrand48(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
);

@ffi.Native<ffi.Long Function()>(
    symbol: 'mrand48', assetId: 'transport-bindings')
external int mrand48();

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>(
    symbol: 'jrand48', assetId: 'transport-bindings')
external int jrand48(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
);

@ffi.Native<ffi.Void Function(ffi.Long)>(
    symbol: 'srand48', assetId: 'transport-bindings')
external void srand48(
  int __seedval,
);

@ffi.Native<
        ffi.Pointer<ffi.UnsignedShort> Function(
            ffi.Pointer<ffi.UnsignedShort>)>(
    symbol: 'seed48', assetId: 'transport-bindings')
external ffi.Pointer<ffi.UnsignedShort> seed48(
  ffi.Pointer<ffi.UnsignedShort> __seed16v,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>(
    symbol: 'lcong48', assetId: 'transport-bindings')
external void lcong48(
  ffi.Pointer<ffi.UnsignedShort> __param,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>(
    symbol: 'drand48_r', assetId: 'transport-bindings')
external int drand48_r(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>(
    symbol: 'erand48_r', assetId: 'transport-bindings')
external int erand48_r(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>(
    symbol: 'lrand48_r', assetId: 'transport-bindings')
external int lrand48_r(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Long> __result,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>(
    symbol: 'nrand48_r', assetId: 'transport-bindings')
external int nrand48_r(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Long> __result,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>(
    symbol: 'mrand48_r', assetId: 'transport-bindings')
external int mrand48_r(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Long> __result,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>(
    symbol: 'jrand48_r', assetId: 'transport-bindings')
external int jrand48_r(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Long> __result,
);

@ffi.Native<ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>(
    symbol: 'srand48_r', assetId: 'transport-bindings')
external int srand48_r(
  int __seedval,
  ffi.Pointer<drand48_data> __buffer,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>(
    symbol: 'seed48_r', assetId: 'transport-bindings')
external int seed48_r(
  ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ffi.Pointer<drand48_data> __buffer,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>(
    symbol: 'lcong48_r', assetId: 'transport-bindings')
external int lcong48_r(
  ffi.Pointer<ffi.UnsignedShort> __param,
  ffi.Pointer<drand48_data> __buffer,
);

@ffi.Native<ffi.UnsignedInt Function()>(
    symbol: 'arc4random', assetId: 'transport-bindings')
external int arc4random();

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'arc4random_buf', assetId: 'transport-bindings')
external void arc4random_buf(
  ffi.Pointer<ffi.Void> __buf,
  int __size,
);

@ffi.Native<ffi.UnsignedInt Function(ffi.UnsignedInt)>(
    symbol: 'arc4random_uniform', assetId: 'transport-bindings')
external int arc4random_uniform(
  int __upper_bound,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size)>(
    symbol: 'malloc', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> malloc(
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>(
    symbol: 'calloc', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> calloc(
  int __nmemb,
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'realloc', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> realloc(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'free', assetId: 'transport-bindings')
external void free(
  ffi.Pointer<ffi.Void> __ptr,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
        ffi.Size)>(symbol: 'reallocarray', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> reallocarray(
  ffi.Pointer<ffi.Void> __ptr,
  int __nmemb,
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size)>(
    symbol: 'alloca', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> alloca(
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size)>(
    symbol: 'valloc', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> valloc(
  int __size,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
        ffi.Size)>(symbol: 'posix_memalign', assetId: 'transport-bindings')
external int posix_memalign(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  int __alignment,
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>(
    symbol: 'aligned_alloc', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> aligned_alloc(
  int __alignment,
  int __size,
);

@ffi.Native<ffi.Void Function()>(symbol: 'abort', assetId: 'transport-bindings')
external void abort();

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'atexit', assetId: 'transport-bindings')
external int atexit(
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'at_quick_exit', assetId: 'transport-bindings')
external int at_quick_exit(
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
            ffi.Pointer<ffi.Void>)>(
    symbol: 'on_exit', assetId: 'transport-bindings')
external int on_exit(
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
      __func,
  ffi.Pointer<ffi.Void> __arg,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: 'exit', assetId: 'transport-bindings')
external void exit(
  int __status,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: 'quick_exit', assetId: 'transport-bindings')
external void quick_exit(
  int __status,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'getenv', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> getenv(
  ffi.Pointer<ffi.Char> __name,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'putenv', assetId: 'transport-bindings')
external int putenv(
  ffi.Pointer<ffi.Char> __string,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Int)>(symbol: 'setenv', assetId: 'transport-bindings')
external int setenv(
  ffi.Pointer<ffi.Char> __name,
  ffi.Pointer<ffi.Char> __value,
  int __replace,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'unsetenv', assetId: 'transport-bindings')
external int unsetenv(
  ffi.Pointer<ffi.Char> __name,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'clearenv', assetId: 'transport-bindings')
external int clearenv();

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'mktemp', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> mktemp(
  ffi.Pointer<ffi.Char> __template,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'mkstemp', assetId: 'transport-bindings')
external int mkstemp(
  ffi.Pointer<ffi.Char> __template,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'mkstemps', assetId: 'transport-bindings')
external int mkstemps(
  ffi.Pointer<ffi.Char> __template,
  int __suffixlen,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'mkdtemp', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> mkdtemp(
  ffi.Pointer<ffi.Char> __template,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'system', assetId: 'transport-bindings')
external int system(
  ffi.Pointer<ffi.Char> __command,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'realpath', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> realpath(
  ffi.Pointer<ffi.Char> __name,
  ffi.Pointer<ffi.Char> __resolved,
);

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Size,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>(
    symbol: 'bsearch', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> bsearch(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  int __nmemb,
  int __size,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      __compar,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Size,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>(
    symbol: 'qsort', assetId: 'transport-bindings')
external void qsort(
  ffi.Pointer<ffi.Void> __base,
  int __nmemb,
  int __size,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      __compar,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'abs', assetId: 'transport-bindings')
external int abs(
  int __x,
);

@ffi.Native<ffi.Long Function(ffi.Long)>(
    symbol: 'labs', assetId: 'transport-bindings')
external int labs(
  int __x,
);

@ffi.Native<ffi.LongLong Function(ffi.LongLong)>(
    symbol: 'llabs', assetId: 'transport-bindings')
external int llabs(
  int __x,
);

@ffi.Native<div_t Function(ffi.Int, ffi.Int)>(
    symbol: 'div', assetId: 'transport-bindings')
external div_t div(
  int __numer,
  int __denom,
);

@ffi.Native<ldiv_t Function(ffi.Long, ffi.Long)>(
    symbol: 'ldiv', assetId: 'transport-bindings')
external ldiv_t ldiv(
  int __numer,
  int __denom,
);

@ffi.Native<lldiv_t Function(ffi.LongLong, ffi.LongLong)>(
    symbol: 'lldiv', assetId: 'transport-bindings')
external lldiv_t lldiv(
  int __numer,
  int __denom,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>)>(symbol: 'ecvt', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> ecvt(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int> __decpt,
  ffi.Pointer<ffi.Int> __sign,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>)>(symbol: 'fcvt', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> fcvt(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int> __decpt,
  ffi.Pointer<ffi.Int> __sign,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
        ffi.Pointer<ffi.Char>)>(symbol: 'gcvt', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> gcvt(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Char> __buf,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Double,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'ecvt_r', assetId: 'transport-bindings')
external int ecvt_r(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int> __decpt,
  ffi.Pointer<ffi.Int> __sign,
  ffi.Pointer<ffi.Char> __buf,
  int __len,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Double,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'fcvt_r', assetId: 'transport-bindings')
external int fcvt_r(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int> __decpt,
  ffi.Pointer<ffi.Int> __sign,
  ffi.Pointer<ffi.Char> __buf,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'mblen', assetId: 'transport-bindings')
external int mblen(
  ffi.Pointer<ffi.Char> __s,
  int __n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'mbtowc', assetId: 'transport-bindings')
external int mbtowc(
  ffi.Pointer<ffi.WChar> __pwc,
  ffi.Pointer<ffi.Char> __s,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>(
    symbol: 'wctomb', assetId: 'transport-bindings')
external int wctomb(
  ffi.Pointer<ffi.Char> __s,
  int __wchar,
);

@ffi.Native<
    ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'mbstowcs', assetId: 'transport-bindings')
external int mbstowcs(
  ffi.Pointer<ffi.WChar> __pwcs,
  ffi.Pointer<ffi.Char> __s,
  int __n,
);

@ffi.Native<
    ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
        ffi.Size)>(symbol: 'wcstombs', assetId: 'transport-bindings')
external int wcstombs(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.WChar> __pwcs,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'rpmatch', assetId: 'transport-bindings')
external int rpmatch(
  ffi.Pointer<ffi.Char> __response,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'getsubopt', assetId: 'transport-bindings')
external int getsubopt(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>(
    symbol: 'getloadavg', assetId: 'transport-bindings')
external int getloadavg(
  ffi.Pointer<ffi.Double> __loadavg,
  int __nelem,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'memcpy', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> memcpy(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'memmove', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> memmove(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Int, ffi.Size)>(symbol: 'memccpy', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> memccpy(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int,
        ffi.Size)>(symbol: 'memset', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> memset(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'memcmp', assetId: 'transport-bindings')
external int memcmp(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int,
        ffi.Size)>(symbol: 'memchr', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> memchr(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>)>(symbol: 'strcpy', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strcpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strncpy', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strncpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>)>(symbol: 'strcat', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strcat(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strncat', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strncat(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcmp', assetId: 'transport-bindings')
external int strcmp(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strncmp', assetId: 'transport-bindings')
external int strncmp(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcoll', assetId: 'transport-bindings')
external int strcoll(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strxfrm', assetId: 'transport-bindings')
external int strxfrm(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        locale_t)>(symbol: 'strcoll_l', assetId: 'transport-bindings')
external int strcoll_l(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  locale_t __l,
);

@ffi.Native<
    ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size,
        locale_t)>(symbol: 'strxfrm_l', assetId: 'transport-bindings')
external int strxfrm_l(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
  locale_t __l,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'strdup', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strdup(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'strndup', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strndup(
  ffi.Pointer<ffi.Char> __string,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'strchr', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strchr(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'strrchr', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strrchr(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'strchrnul', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strchrnul(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<
        ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcspn', assetId: 'transport-bindings')
external int strcspn(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __reject,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>)>(symbol: 'strspn', assetId: 'transport-bindings')
external int strspn(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __accept,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strpbrk', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strpbrk(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __accept,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>)>(symbol: 'strstr', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strstr(
  ffi.Pointer<ffi.Char> __haystack,
  ffi.Pointer<ffi.Char> __needle,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>)>(symbol: 'strtok', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strtok(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __delim,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'strtok_r', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strtok_r(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcasestr', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strcasestr(
  ffi.Pointer<ffi.Char> __haystack,
  ffi.Pointer<ffi.Char> __needle,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void>,
        ffi.Size,
        ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'memmem', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> memmem(
  ffi.Pointer<ffi.Void> __haystack,
  int __haystacklen,
  ffi.Pointer<ffi.Void> __needle,
  int __needlelen,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'mempcpy', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Void> mempcpy(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'strlen', assetId: 'transport-bindings')
external int strlen(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'strnlen', assetId: 'transport-bindings')
external int strnlen(
  ffi.Pointer<ffi.Char> __string,
  int __maxlen,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>(
    symbol: 'strerror', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strerror(
  int __errnum,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'strerror_r', assetId: 'transport-bindings')
external int strerror_r(
  int __errnum,
  ffi.Pointer<ffi.Char> __buf,
  int __buflen,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>(
    symbol: 'strerror_l', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strerror_l(
  int __errnum,
  locale_t __l,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'bcmp', assetId: 'transport-bindings')
external int bcmp(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'bcopy', assetId: 'transport-bindings')
external void bcopy(
  ffi.Pointer<ffi.Void> __src,
  ffi.Pointer<ffi.Void> __dest,
  int __n,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'bzero', assetId: 'transport-bindings')
external void bzero(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'index', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> index(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'rindex', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> rindex(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'ffs', assetId: 'transport-bindings')
external int ffs(
  int __i,
);

@ffi.Native<ffi.Int Function(ffi.Long)>(
    symbol: 'ffsl', assetId: 'transport-bindings')
external int ffsl(
  int __l,
);

@ffi.Native<ffi.Int Function(ffi.LongLong)>(
    symbol: 'ffsll', assetId: 'transport-bindings')
external int ffsll(
  int __ll,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcasecmp', assetId: 'transport-bindings')
external int strcasecmp(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strncasecmp', assetId: 'transport-bindings')
external int strncasecmp(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  int __n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        locale_t)>(symbol: 'strcasecmp_l', assetId: 'transport-bindings')
external int strcasecmp_l(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  locale_t __loc,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size,
        locale_t)>(symbol: 'strncasecmp_l', assetId: 'transport-bindings')
external int strncasecmp_l(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  int __n,
  locale_t __loc,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'explicit_bzero', assetId: 'transport-bindings')
external void explicit_bzero(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Pointer<ffi.Char>)>(symbol: 'strsep', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strsep(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
  ffi.Pointer<ffi.Char> __delim,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>(
    symbol: 'strsignal', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> strsignal(
  int __sig,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>)>(symbol: 'stpcpy', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> stpcpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'stpncpy', assetId: 'transport-bindings')
external ffi.Pointer<ffi.Char> stpncpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strlcpy', assetId: 'transport-bindings')
external int strlcpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strlcat', assetId: 'transport-bindings')
external int strlcat(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>(
    symbol: 'gettimeofday', assetId: 'transport-bindings')
external int gettimeofday(
  ffi.Pointer<timeval> __tv,
  ffi.Pointer<ffi.Void> __tz,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<timeval>, ffi.Pointer<timezone>)>(
    symbol: 'settimeofday', assetId: 'transport-bindings')
external int settimeofday(
  ffi.Pointer<timeval> __tv,
  ffi.Pointer<timezone> __tz,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>(
    symbol: 'adjtime', assetId: 'transport-bindings')
external int adjtime(
  ffi.Pointer<timeval> __delta,
  ffi.Pointer<timeval> __olddelta,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<itimerval>)>(
    symbol: 'getitimer', assetId: 'transport-bindings')
external int getitimer(
  int __which,
  ffi.Pointer<itimerval> __value,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<itimerval>, ffi.Pointer<itimerval>)>(
    symbol: 'setitimer', assetId: 'transport-bindings')
external int setitimer(
  int __which,
  ffi.Pointer<itimerval> __new,
  ffi.Pointer<itimerval> __old,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>(
    symbol: 'utimes', assetId: 'transport-bindings')
external int utimes(
  ffi.Pointer<ffi.Char> __file,
  ffi.Pointer<timeval> __tvp,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>(
    symbol: 'lutimes', assetId: 'transport-bindings')
external int lutimes(
  ffi.Pointer<ffi.Char> __file,
  ffi.Pointer<timeval> __tvp,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<timeval>)>(
    symbol: 'futimes', assetId: 'transport-bindings')
external int futimes(
  int __fd,
  ffi.Pointer<timeval> __tvp,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'socket', assetId: 'transport-bindings')
external int socket(
  int __domain,
  int __type,
  int __protocol,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'socketpair', assetId: 'transport-bindings')
external int socketpair(
  int __domain,
  int __type,
  int __protocol,
  ffi.Pointer<ffi.Int> __fds,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>(
    symbol: 'bind', assetId: 'transport-bindings')
external int bind(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  int __len,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>(
    symbol: 'getsockname', assetId: 'transport-bindings')
external int getsockname(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<socklen_t> __len,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>(
    symbol: 'connect', assetId: 'transport-bindings')
external int connect(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  int __len,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>(
    symbol: 'getpeername', assetId: 'transport-bindings')
external int getpeername(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<socklen_t> __len,
);

@ffi.Native<
        ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>(
    symbol: 'send', assetId: 'transport-bindings')
external int send(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
);

@ffi.Native<
        ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>(
    symbol: 'recv', assetId: 'transport-bindings')
external int recv(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
);

@ffi.Native<
    ssize_t Function(
        ffi.Int,
        ffi.Pointer<ffi.Void>,
        ffi.Size,
        ffi.Int,
        ffi.Pointer<sockaddr>,
        socklen_t)>(symbol: 'sendto', assetId: 'transport-bindings')
external int sendto(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
  ffi.Pointer<sockaddr> __addr,
  int __addr_len,
);

@ffi.Native<
        ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int,
            ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>(
    symbol: 'recvfrom', assetId: 'transport-bindings')
external int recvfrom(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<socklen_t> __addr_len,
);

@ffi.Native<ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>(
    symbol: 'sendmsg', assetId: 'transport-bindings')
external int sendmsg(
  int __fd,
  ffi.Pointer<msghdr> __message,
  int __flags,
);

@ffi.Native<ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>(
    symbol: 'recvmsg', assetId: 'transport-bindings')
external int recvmsg(
  int __fd,
  ffi.Pointer<msghdr> __message,
  int __flags,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
            ffi.Pointer<socklen_t>)>(
    symbol: 'getsockopt', assetId: 'transport-bindings')
external int getsockopt(
  int __fd,
  int __level,
  int __optname,
  ffi.Pointer<ffi.Void> __optval,
  ffi.Pointer<socklen_t> __optlen,
);

@ffi.Native<
    ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
        socklen_t)>(symbol: 'setsockopt', assetId: 'transport-bindings')
external int setsockopt(
  int __fd,
  int __level,
  int __optname,
  ffi.Pointer<ffi.Void> __optval,
  int __optlen,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(
    symbol: 'listen', assetId: 'transport-bindings')
external int listen(
  int __fd,
  int __n,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>(
    symbol: 'accept', assetId: 'transport-bindings')
external int accept(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<socklen_t> __addr_len,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(
    symbol: 'shutdown', assetId: 'transport-bindings')
external int shutdown(
  int __fd,
  int __how,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'sockatmark', assetId: 'transport-bindings')
external int sockatmark(
  int __fd,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(
    symbol: 'isfdtype', assetId: 'transport-bindings')
external int isfdtype(
  int __fd,
  int __fdtype,
);

@ffi.Native<ffi.Uint32 Function(ffi.Uint32)>(
    symbol: 'ntohl', assetId: 'transport-bindings')
external int ntohl(
  int __netlong,
);

@ffi.Native<ffi.Uint16 Function(ffi.Uint16)>(
    symbol: 'ntohs', assetId: 'transport-bindings')
external int ntohs(
  int __netshort,
);

@ffi.Native<ffi.Uint32 Function(ffi.Uint32)>(
    symbol: 'htonl', assetId: 'transport-bindings')
external int htonl(
  int __hostlong,
);

@ffi.Native<ffi.Uint16 Function(ffi.Uint16)>(
    symbol: 'htons', assetId: 'transport-bindings')
external int htons(
  int __hostshort,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr_in>)>(
    symbol: 'bindresvport', assetId: 'transport-bindings')
external int bindresvport(
  int __sockfd,
  ffi.Pointer<sockaddr_in> __sock_in,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr_in6>)>(
    symbol: 'bindresvport6', assetId: 'transport-bindings')
external int bindresvport6(
  int __sockfd,
  ffi.Pointer<sockaddr_in6> __sock_in,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_client_t>,
            ffi.Pointer<transport_client_configuration_t>,
            ffi.Pointer<ffi.Char>,
            ffi.Int32)>(
    symbol: 'transport_client_initialize_tcp', assetId: 'transport-bindings')
external int transport_client_initialize_tcp(
  ffi.Pointer<transport_client_t> client,
  ffi.Pointer<transport_client_configuration_t> configuration,
  ffi.Pointer<ffi.Char> ip,
  int port,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_client_t>,
            ffi.Pointer<transport_client_configuration_t>,
            ffi.Pointer<ffi.Char>,
            ffi.Int32,
            ffi.Pointer<ffi.Char>,
            ffi.Int32)>(
    symbol: 'transport_client_initialize_udp', assetId: 'transport-bindings')
external int transport_client_initialize_udp(
  ffi.Pointer<transport_client_t> client,
  ffi.Pointer<transport_client_configuration_t> configuration,
  ffi.Pointer<ffi.Char> destination_ip,
  int destination_port,
  ffi.Pointer<ffi.Char> source_ip,
  int source_port,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_client_t>,
            ffi.Pointer<transport_client_configuration_t>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'transport_client_initialize_unix_stream',
    assetId: 'transport-bindings')
external int transport_client_initialize_unix_stream(
  ffi.Pointer<transport_client_t> client,
  ffi.Pointer<transport_client_configuration_t> configuration,
  ffi.Pointer<ffi.Char> path,
);

@ffi.Native<ffi.Pointer<sockaddr> Function(ffi.Pointer<transport_client_t>)>(
    symbol: 'transport_client_get_destination_address',
    assetId: 'transport-bindings')
external ffi.Pointer<sockaddr> transport_client_get_destination_address(
  ffi.Pointer<transport_client_t> client,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_client_t>)>(
    symbol: 'transport_client_destroy', assetId: 'transport-bindings')
external void transport_client_destroy(
  ffi.Pointer<transport_client_t> client,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'acos', assetId: 'transport-bindings')
external double acos(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'asin', assetId: 'transport-bindings')
external double asin(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'atan', assetId: 'transport-bindings')
external double atan(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'atan2', assetId: 'transport-bindings')
external double atan2(
  double __y,
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'cos', assetId: 'transport-bindings')
external double cos(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'sin', assetId: 'transport-bindings')
external double sin(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'tan', assetId: 'transport-bindings')
external double tan(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'cosh', assetId: 'transport-bindings')
external double cosh(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'sinh', assetId: 'transport-bindings')
external double sinh(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'tanh', assetId: 'transport-bindings')
external double tanh(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'acosh', assetId: 'transport-bindings')
external double acosh(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'asinh', assetId: 'transport-bindings')
external double asinh(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'atanh', assetId: 'transport-bindings')
external double atanh(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'exp', assetId: 'transport-bindings')
external double exp(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>(
    symbol: 'frexp', assetId: 'transport-bindings')
external double frexp(
  double __x,
  ffi.Pointer<ffi.Int> __exponent,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Int)>(
    symbol: 'ldexp', assetId: 'transport-bindings')
external double ldexp(
  double __x,
  int __exponent,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'log', assetId: 'transport-bindings')
external double log(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'log10', assetId: 'transport-bindings')
external double log10(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>(
    symbol: 'modf', assetId: 'transport-bindings')
external double modf(
  double __x,
  ffi.Pointer<ffi.Double> __iptr,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'expm1', assetId: 'transport-bindings')
external double expm1(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'log1p', assetId: 'transport-bindings')
external double log1p(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'logb', assetId: 'transport-bindings')
external double logb(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'exp2', assetId: 'transport-bindings')
external double exp2(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'log2', assetId: 'transport-bindings')
external double log2(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'pow', assetId: 'transport-bindings')
external double pow(
  double __x,
  double __y,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'sqrt', assetId: 'transport-bindings')
external double sqrt(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'hypot', assetId: 'transport-bindings')
external double hypot(
  double __x,
  double __y,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'cbrt', assetId: 'transport-bindings')
external double cbrt(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'ceil', assetId: 'transport-bindings')
external double ceil(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'fabs', assetId: 'transport-bindings')
external double fabs(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'floor', assetId: 'transport-bindings')
external double floor(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'fmod', assetId: 'transport-bindings')
external double fmod(
  double __x,
  double __y,
);

@ffi.Native<ffi.Int Function(ffi.Double)>(
    symbol: 'isinf', assetId: 'transport-bindings')
external int isinf(
  double __value,
);

@ffi.Native<ffi.Int Function(ffi.Double)>(
    symbol: 'finite', assetId: 'transport-bindings')
external int finite(
  double __value,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'drem', assetId: 'transport-bindings')
external double drem(
  double __x,
  double __y,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'significand', assetId: 'transport-bindings')
external double significand(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'copysign', assetId: 'transport-bindings')
external double copysign(
  double __x,
  double __y,
);

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'nan', assetId: 'transport-bindings')
external double nan(
  ffi.Pointer<ffi.Char> __tagb,
);

@ffi.Native<ffi.Int Function(ffi.Double)>(
    symbol: 'isnan', assetId: 'transport-bindings')
external int isnan(
  double __value,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'j0', assetId: 'transport-bindings')
external double j0(
  double arg0,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'j1', assetId: 'transport-bindings')
external double j1(
  double arg0,
);

@ffi.Native<ffi.Double Function(ffi.Int, ffi.Double)>(
    symbol: 'jn', assetId: 'transport-bindings')
external double jn(
  int arg0,
  double arg1,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'y0', assetId: 'transport-bindings')
external double y0(
  double arg0,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'y1', assetId: 'transport-bindings')
external double y1(
  double arg0,
);

@ffi.Native<ffi.Double Function(ffi.Int, ffi.Double)>(
    symbol: 'yn', assetId: 'transport-bindings')
external double yn(
  int arg0,
  double arg1,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'erf', assetId: 'transport-bindings')
external double erf(
  double arg0,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'erfc', assetId: 'transport-bindings')
external double erfc(
  double arg0,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'lgamma', assetId: 'transport-bindings')
external double lgamma(
  double arg0,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'tgamma', assetId: 'transport-bindings')
external double tgamma(
  double arg0,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'gamma', assetId: 'transport-bindings')
external double gamma(
  double arg0,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>(
    symbol: 'lgamma_r', assetId: 'transport-bindings')
external double lgamma_r(
  double arg0,
  ffi.Pointer<ffi.Int> __signgamp,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'rint', assetId: 'transport-bindings')
external double rint(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'nextafter', assetId: 'transport-bindings')
external double nextafter(
  double __x,
  double __y,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'remainder', assetId: 'transport-bindings')
external double remainder(
  double __x,
  double __y,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Int)>(
    symbol: 'scalbn', assetId: 'transport-bindings')
external double scalbn(
  double __x,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Double)>(
    symbol: 'ilogb', assetId: 'transport-bindings')
external int ilogb(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Long)>(
    symbol: 'scalbln', assetId: 'transport-bindings')
external double scalbln(
  double __x,
  int __n,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'nearbyint', assetId: 'transport-bindings')
external double nearbyint(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'round', assetId: 'transport-bindings')
external double round(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'trunc', assetId: 'transport-bindings')
external double trunc(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>(
    symbol: 'remquo', assetId: 'transport-bindings')
external double remquo(
  double __x,
  double __y,
  ffi.Pointer<ffi.Int> __quo,
);

@ffi.Native<ffi.Long Function(ffi.Double)>(
    symbol: 'lrint', assetId: 'transport-bindings')
external int lrint(
  double __x,
);

@ffi.Native<ffi.LongLong Function(ffi.Double)>(
    symbol: 'llrint', assetId: 'transport-bindings')
external int llrint(
  double __x,
);

@ffi.Native<ffi.Long Function(ffi.Double)>(
    symbol: 'lround', assetId: 'transport-bindings')
external int lround(
  double __x,
);

@ffi.Native<ffi.LongLong Function(ffi.Double)>(
    symbol: 'llround', assetId: 'transport-bindings')
external int llround(
  double __x,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'fdim', assetId: 'transport-bindings')
external double fdim(
  double __x,
  double __y,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'fmax', assetId: 'transport-bindings')
external double fmax(
  double __x,
  double __y,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'fmin', assetId: 'transport-bindings')
external double fmin(
  double __x,
  double __y,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>(
    symbol: 'fma', assetId: 'transport-bindings')
external double fma(
  double __x,
  double __y,
  double __z,
);

@ffi.Native<ffi.Double Function(ffi.Double, ffi.Double)>(
    symbol: 'scalb', assetId: 'transport-bindings')
external double scalb(
  double __x,
  double __n,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'acosf', assetId: 'transport-bindings')
external double acosf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'asinf', assetId: 'transport-bindings')
external double asinf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'atanf', assetId: 'transport-bindings')
external double atanf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'atan2f', assetId: 'transport-bindings')
external double atan2f(
  double __y,
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'cosf', assetId: 'transport-bindings')
external double cosf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'sinf', assetId: 'transport-bindings')
external double sinf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'tanf', assetId: 'transport-bindings')
external double tanf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'coshf', assetId: 'transport-bindings')
external double coshf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'sinhf', assetId: 'transport-bindings')
external double sinhf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'tanhf', assetId: 'transport-bindings')
external double tanhf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'acoshf', assetId: 'transport-bindings')
external double acoshf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'asinhf', assetId: 'transport-bindings')
external double asinhf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'atanhf', assetId: 'transport-bindings')
external double atanhf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'expf', assetId: 'transport-bindings')
external double expf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>(
    symbol: 'frexpf', assetId: 'transport-bindings')
external double frexpf(
  double __x,
  ffi.Pointer<ffi.Int> __exponent,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Int)>(
    symbol: 'ldexpf', assetId: 'transport-bindings')
external double ldexpf(
  double __x,
  int __exponent,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'logf', assetId: 'transport-bindings')
external double logf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'log10f', assetId: 'transport-bindings')
external double log10f(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>(
    symbol: 'modff', assetId: 'transport-bindings')
external double modff(
  double __x,
  ffi.Pointer<ffi.Float> __iptr,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'expm1f', assetId: 'transport-bindings')
external double expm1f(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'log1pf', assetId: 'transport-bindings')
external double log1pf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'logbf', assetId: 'transport-bindings')
external double logbf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'exp2f', assetId: 'transport-bindings')
external double exp2f(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'log2f', assetId: 'transport-bindings')
external double log2f(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'powf', assetId: 'transport-bindings')
external double powf(
  double __x,
  double __y,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'sqrtf', assetId: 'transport-bindings')
external double sqrtf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'hypotf', assetId: 'transport-bindings')
external double hypotf(
  double __x,
  double __y,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'cbrtf', assetId: 'transport-bindings')
external double cbrtf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'ceilf', assetId: 'transport-bindings')
external double ceilf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'fabsf', assetId: 'transport-bindings')
external double fabsf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'floorf', assetId: 'transport-bindings')
external double floorf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'fmodf', assetId: 'transport-bindings')
external double fmodf(
  double __x,
  double __y,
);

@ffi.Native<ffi.Int Function(ffi.Float)>(
    symbol: 'isinff', assetId: 'transport-bindings')
external int isinff(
  double __value,
);

@ffi.Native<ffi.Int Function(ffi.Float)>(
    symbol: 'finitef', assetId: 'transport-bindings')
external int finitef(
  double __value,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'dremf', assetId: 'transport-bindings')
external double dremf(
  double __x,
  double __y,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'significandf', assetId: 'transport-bindings')
external double significandf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'copysignf', assetId: 'transport-bindings')
external double copysignf(
  double __x,
  double __y,
);

@ffi.Native<ffi.Float Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'nanf', assetId: 'transport-bindings')
external double nanf(
  ffi.Pointer<ffi.Char> __tagb,
);

@ffi.Native<ffi.Int Function(ffi.Float)>(
    symbol: 'isnanf', assetId: 'transport-bindings')
external int isnanf(
  double __value,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'j0f', assetId: 'transport-bindings')
external double j0f(
  double arg0,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'j1f', assetId: 'transport-bindings')
external double j1f(
  double arg0,
);

@ffi.Native<ffi.Float Function(ffi.Int, ffi.Float)>(
    symbol: 'jnf', assetId: 'transport-bindings')
external double jnf(
  int arg0,
  double arg1,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'y0f', assetId: 'transport-bindings')
external double y0f(
  double arg0,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'y1f', assetId: 'transport-bindings')
external double y1f(
  double arg0,
);

@ffi.Native<ffi.Float Function(ffi.Int, ffi.Float)>(
    symbol: 'ynf', assetId: 'transport-bindings')
external double ynf(
  int arg0,
  double arg1,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'erff', assetId: 'transport-bindings')
external double erff(
  double arg0,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'erfcf', assetId: 'transport-bindings')
external double erfcf(
  double arg0,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'lgammaf', assetId: 'transport-bindings')
external double lgammaf(
  double arg0,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'tgammaf', assetId: 'transport-bindings')
external double tgammaf(
  double arg0,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'gammaf', assetId: 'transport-bindings')
external double gammaf(
  double arg0,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>(
    symbol: 'lgammaf_r', assetId: 'transport-bindings')
external double lgammaf_r(
  double arg0,
  ffi.Pointer<ffi.Int> __signgamp,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'rintf', assetId: 'transport-bindings')
external double rintf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'nextafterf', assetId: 'transport-bindings')
external double nextafterf(
  double __x,
  double __y,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'remainderf', assetId: 'transport-bindings')
external double remainderf(
  double __x,
  double __y,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Int)>(
    symbol: 'scalbnf', assetId: 'transport-bindings')
external double scalbnf(
  double __x,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Float)>(
    symbol: 'ilogbf', assetId: 'transport-bindings')
external int ilogbf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Long)>(
    symbol: 'scalblnf', assetId: 'transport-bindings')
external double scalblnf(
  double __x,
  int __n,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'nearbyintf', assetId: 'transport-bindings')
external double nearbyintf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'roundf', assetId: 'transport-bindings')
external double roundf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'truncf', assetId: 'transport-bindings')
external double truncf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>(
    symbol: 'remquof', assetId: 'transport-bindings')
external double remquof(
  double __x,
  double __y,
  ffi.Pointer<ffi.Int> __quo,
);

@ffi.Native<ffi.Long Function(ffi.Float)>(
    symbol: 'lrintf', assetId: 'transport-bindings')
external int lrintf(
  double __x,
);

@ffi.Native<ffi.LongLong Function(ffi.Float)>(
    symbol: 'llrintf', assetId: 'transport-bindings')
external int llrintf(
  double __x,
);

@ffi.Native<ffi.Long Function(ffi.Float)>(
    symbol: 'lroundf', assetId: 'transport-bindings')
external int lroundf(
  double __x,
);

@ffi.Native<ffi.LongLong Function(ffi.Float)>(
    symbol: 'llroundf', assetId: 'transport-bindings')
external int llroundf(
  double __x,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'fdimf', assetId: 'transport-bindings')
external double fdimf(
  double __x,
  double __y,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'fmaxf', assetId: 'transport-bindings')
external double fmaxf(
  double __x,
  double __y,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'fminf', assetId: 'transport-bindings')
external double fminf(
  double __x,
  double __y,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'fmaf', assetId: 'transport-bindings')
external double fmaf(
  double __x,
  double __y,
  double __z,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float)>(
    symbol: 'scalbf', assetId: 'transport-bindings')
external double scalbf(
  double __x,
  double __n,
);

@ffi.Native<ffi.Pointer<mh_events_t> Function()>(
    symbol: 'mh_events_new', assetId: 'transport-bindings')
external ffi.Pointer<mh_events_t> mh_events_new();

@ffi.Native<ffi.Void Function(ffi.Pointer<mh_events_t>)>(
    symbol: 'mh_events_clear', assetId: 'transport-bindings')
external void mh_events_clear(
  ffi.Pointer<mh_events_t> h,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<mh_events_t>)>(
    symbol: 'mh_events_delete', assetId: 'transport-bindings')
external void mh_events_delete(
  ffi.Pointer<mh_events_t> h,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<mh_events_t>, ffi.Uint64)>(
    symbol: 'mh_events_resize', assetId: 'transport-bindings')
external void mh_events_resize(
  ffi.Pointer<mh_events_t> h,
  int arg,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<mh_events_t>, mh_int_t, mh_int_t, ffi.Uint64)>(
    symbol: 'mh_events_start_resize', assetId: 'transport-bindings')
external int mh_events_start_resize(
  ffi.Pointer<mh_events_t> h,
  int buckets,
  int batch,
  int arg,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<mh_events_t>, mh_int_t, ffi.Uint64)>(
    symbol: 'mh_events_reserve', assetId: 'transport-bindings')
external int mh_events_reserve(
  ffi.Pointer<mh_events_t> h,
  int size,
  int arg,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<mh_events_t>, mh_int_t, ffi.Uint64)>(
    symbol: 'mh_events_del_resize', assetId: 'transport-bindings')
external void mh_events_del_resize(
  ffi.Pointer<mh_events_t> h,
  int x,
  int arg,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<mh_events_t>)>(
    symbol: 'mh_events_memsize', assetId: 'transport-bindings')
external int mh_events_memsize(
  ffi.Pointer<mh_events_t> h,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<mh_events_t>)>(
    symbol: 'mh_events_dump', assetId: 'transport-bindings')
external void mh_events_dump(
  ffi.Pointer<mh_events_t> h,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_server_t>,
            ffi.Pointer<transport_server_configuration_t>,
            ffi.Pointer<ffi.Char>,
            ffi.Int32)>(
    symbol: 'transport_server_initialize_tcp', assetId: 'transport-bindings')
external int transport_server_initialize_tcp(
  ffi.Pointer<transport_server_t> server,
  ffi.Pointer<transport_server_configuration_t> configuration,
  ffi.Pointer<ffi.Char> ip,
  int port,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_server_t>,
            ffi.Pointer<transport_server_configuration_t>,
            ffi.Pointer<ffi.Char>,
            ffi.Int32)>(
    symbol: 'transport_server_initialize_udp', assetId: 'transport-bindings')
external int transport_server_initialize_udp(
  ffi.Pointer<transport_server_t> server,
  ffi.Pointer<transport_server_configuration_t> configuration,
  ffi.Pointer<ffi.Char> ip,
  int port,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<transport_server_t>,
            ffi.Pointer<transport_server_configuration_t>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'transport_server_initialize_unix_stream',
    assetId: 'transport-bindings')
external int transport_server_initialize_unix_stream(
  ffi.Pointer<transport_server_t> server,
  ffi.Pointer<transport_server_configuration_t> configuration,
  ffi.Pointer<ffi.Char> path,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_server_t>)>(
    symbol: 'transport_server_destroy', assetId: 'transport-bindings')
external void transport_server_destroy(
  ffi.Pointer<transport_server_t> server,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<transport_worker_t>,
            ffi.Pointer<transport_worker_configuration_t>, ffi.Uint8)>(
    symbol: 'transport_worker_initialize',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_worker_initialize(
  ffi.Pointer<transport_worker_t> worker,
  ffi.Pointer<transport_worker_configuration_t> configuration,
  int id,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Uint32,
            ffi.Uint16, ffi.Uint32, ffi.Int64, ffi.Uint16, ffi.Uint8)>(
    symbol: 'transport_worker_write',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_write(
  ffi.Pointer<transport_worker_t> worker,
  int fd,
  int buffer_id,
  int offset,
  int timeout,
  int event,
  int sqe_flags,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Uint32,
            ffi.Uint16, ffi.Uint32, ffi.Int64, ffi.Uint16, ffi.Uint8)>(
    symbol: 'transport_worker_read',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_read(
  ffi.Pointer<transport_worker_t> worker,
  int fd,
  int buffer_id,
  int offset,
  int timeout,
  int event,
  int sqe_flags,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<transport_worker_t>,
            ffi.Uint32,
            ffi.Uint16,
            ffi.Pointer<sockaddr>,
            ffi.Int32,
            ffi.Int,
            ffi.Int64,
            ffi.Uint16,
            ffi.Uint8)>(
    symbol: 'transport_worker_send_message',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_send_message(
  ffi.Pointer<transport_worker_t> worker,
  int fd,
  int buffer_id,
  ffi.Pointer<sockaddr> address,
  int socket_family,
  int message_flags,
  int timeout,
  int event,
  int sqe_flags,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Uint32,
            ffi.Uint16, ffi.Int32, ffi.Int, ffi.Int64, ffi.Uint16, ffi.Uint8)>(
    symbol: 'transport_worker_receive_message',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_receive_message(
  ffi.Pointer<transport_worker_t> worker,
  int fd,
  int buffer_id,
  int socket_family,
  int message_flags,
  int timeout,
  int event,
  int sqe_flags,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<transport_worker_t>,
            ffi.Pointer<transport_client_t>, ffi.Int64)>(
    symbol: 'transport_worker_connect',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_connect(
  ffi.Pointer<transport_worker_t> worker,
  ffi.Pointer<transport_client_t> client,
  int timeout,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<transport_worker_t>, ffi.Pointer<transport_server_t>)>(
    symbol: 'transport_worker_accept',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_accept(
  ffi.Pointer<transport_worker_t> worker,
  ffi.Pointer<transport_server_t> server,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Int)>(
    symbol: 'transport_worker_cancel_by_fd',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_cancel_by_fd(
  ffi.Pointer<transport_worker_t> worker,
  int fd,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_worker_t>)>(
    symbol: 'transport_worker_check_event_timeouts',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_check_event_timeouts(
  ffi.Pointer<transport_worker_t> worker,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Uint64)>(
    symbol: 'transport_worker_remove_event',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_remove_event(
  ffi.Pointer<transport_worker_t> worker,
  int data,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<transport_worker_t>)>(
    symbol: 'transport_worker_get_buffer',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_worker_get_buffer(
  ffi.Pointer<transport_worker_t> worker,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_worker_t>, ffi.Uint16)>(
    symbol: 'transport_worker_release_buffer',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_release_buffer(
  ffi.Pointer<transport_worker_t> worker,
  int buffer_id,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<transport_worker_t>)>(
    symbol: 'transport_worker_available_buffers',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_worker_available_buffers(
  ffi.Pointer<transport_worker_t> worker,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<transport_worker_t>)>(
    symbol: 'transport_worker_used_buffers',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_worker_used_buffers(
  ffi.Pointer<transport_worker_t> worker,
);

@ffi.Native<
        ffi.Pointer<sockaddr> Function(
            ffi.Pointer<transport_worker_t>, ffi.Int32, ffi.Int)>(
    symbol: 'transport_worker_get_datagram_address',
    assetId: 'transport-bindings',
    isLeaf: true)
external ffi.Pointer<sockaddr> transport_worker_get_datagram_address(
  ffi.Pointer<transport_worker_t> worker,
  int socket_family,
  int buffer_id,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<transport_worker_t>)>(
    symbol: 'transport_worker_peek',
    assetId: 'transport-bindings',
    isLeaf: true)
external int transport_worker_peek(
  ffi.Pointer<transport_worker_t> worker,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<transport_worker_t>)>(
    symbol: 'transport_worker_destroy',
    assetId: 'transport-bindings',
    isLeaf: true)
external void transport_worker_destroy(
  ffi.Pointer<transport_worker_t> worker,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Bool, ffi.Bool)>(
    symbol: 'transport_file_open', assetId: 'transport-bindings')
external int transport_file_open(
  ffi.Pointer<ffi.Char> path,
  int mode,
  bool truncate,
  bool create,
);

@ffi.Native<
        ffi.Int64 Function(
            ffi.Uint64,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint16,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint16)>(
    symbol: 'transport_socket_create_tcp', assetId: 'transport-bindings')
external int transport_socket_create_tcp(
  int flags,
  int socket_receive_buffer_size,
  int socket_send_buffer_size,
  int socket_receive_low_at,
  int socket_send_low_at,
  int ip_ttl,
  int tcp_keep_alive_idle,
  int tcp_keep_alive_max_count,
  int tcp_keep_alive_individual_count,
  int tcp_max_segment_size,
  int tcp_syn_count,
);

@ffi.Native<
        ffi.Int64 Function(
            ffi.Uint64,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Uint16,
            ffi.Pointer<transport_ip_mreqn>,
            ffi.Uint32)>(
    symbol: 'transport_socket_create_udp', assetId: 'transport-bindings')
external int transport_socket_create_udp(
  int flags,
  int socket_receive_buffer_size,
  int socket_send_buffer_size,
  int socket_receive_low_at,
  int socket_send_low_at,
  int ip_ttl,
  ffi.Pointer<transport_ip_mreqn> ip_multicast_interface,
  int ip_multicast_ttl,
);

@ffi.Native<
        ffi.Int64 Function(
            ffi.Uint64, ffi.Uint32, ffi.Uint32, ffi.Uint32, ffi.Uint32)>(
    symbol: 'transport_socket_create_unix_stream',
    assetId: 'transport-bindings')
external int transport_socket_create_unix_stream(
  int flags,
  int socket_receive_buffer_size,
  int socket_send_buffer_size,
  int socket_receive_low_at,
  int socket_send_low_at,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<transport_ip_mreqn>,
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'transport_socket_initialize_multicast_request',
    assetId: 'transport-bindings')
external void transport_socket_initialize_multicast_request(
  ffi.Pointer<transport_ip_mreqn> request,
  ffi.Pointer<ffi.Char> group_address,
  ffi.Pointer<ffi.Char> local_address,
  int interface_index,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'transport_socket_multicast_add_membership',
    assetId: 'transport-bindings')
external int transport_socket_multicast_add_membership(
  int fd,
  ffi.Pointer<ffi.Char> group_address,
  ffi.Pointer<ffi.Char> local_address,
  int interface_index,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'transport_socket_multicast_drop_membership',
    assetId: 'transport-bindings')
external int transport_socket_multicast_drop_membership(
  int fd,
  ffi.Pointer<ffi.Char> group_address,
  ffi.Pointer<ffi.Char> local_address,
  int interface_index,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'transport_socket_multicast_add_source_membership',
    assetId: 'transport-bindings')
external int transport_socket_multicast_add_source_membership(
  int fd,
  ffi.Pointer<ffi.Char> group_address,
  ffi.Pointer<ffi.Char> local_address,
  ffi.Pointer<ffi.Char> source_address,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'transport_socket_multicast_drop_source_membership',
    assetId: 'transport-bindings')
external int transport_socket_multicast_drop_source_membership(
  int fd,
  ffi.Pointer<ffi.Char> group_address,
  ffi.Pointer<ffi.Char> local_address,
  ffi.Pointer<ffi.Char> source_address,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'transport_socket_get_interface_index',
    assetId: 'transport-bindings')
external int transport_socket_get_interface_index(
  ffi.Pointer<ffi.Char> interface1,
);

final class io_uring extends ffi.Opaque {}

typedef transport_io_uring = io_uring;
typedef FILE = _IO_FILE;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @ffi.Long()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<ffi.Void> _lock;

  @ffi.Long()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

typedef cookie_io_functions_t = _IO_cookie_io_functions_t;

final class _IO_cookie_io_functions_t extends ffi.Struct {
  external ffi.Pointer<cookie_read_function_t> read;

  external ffi.Pointer<cookie_write_function_t> write;

  external ffi.Pointer<cookie_seek_function_t> seek;

  external ffi.Pointer<cookie_close_function_t> close;
}

typedef cookie_read_function_t = ffi.NativeFunction<
    ffi.Long Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Size __nbytes)>;
typedef cookie_write_function_t = ffi.NativeFunction<
    ffi.Long Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Size __nbytes)>;
typedef cookie_seek_function_t = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Long> __pos, ffi.Int __w)>;
typedef cookie_close_function_t
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> __cookie)>;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef fpos_t = _G_fpos_t;

final class _G_fpos_t extends ffi.Struct {
  @ffi.Long()
  external int __pos;

  external __mbstate_t __state;
}

final class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion1 __value;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

final class timeval extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_usec;
}

final class timespec extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Long> __fds_bits;
}

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_internal_list __list;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

final class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef locale_t = ffi.Pointer<__locale_struct>;

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

final class timezone extends ffi.Struct {
  @ffi.Int()
  external int tz_minuteswest;

  @ffi.Int()
  external int tz_dsttime;
}

abstract class __itimer_which {
  static const int ITIMER_REAL = 0;
  static const int ITIMER_VIRTUAL = 1;
  static const int ITIMER_PROF = 2;
}

final class itimerval extends ffi.Struct {
  external timeval it_interval;

  external timeval it_value;
}

abstract class transport_socket_family {
  static const int INET = 0;
  static const int UNIX = 1;
}

final class transport_buffers_pool extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ids;

  @ffi.Size()
  external int count;

  @ffi.Size()
  external int size;
}

final class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Size()
  external int iov_len;
}

abstract class __socket_type {
  static const int SOCK_STREAM = 1;
  static const int SOCK_DGRAM = 2;
  static const int SOCK_RAW = 3;
  static const int SOCK_RDM = 4;
  static const int SOCK_SEQPACKET = 5;
  static const int SOCK_DCCP = 6;
  static const int SOCK_PACKET = 10;
  static const int SOCK_CLOEXEC = 524288;
  static const int SOCK_NONBLOCK = 2048;
}

final class sockaddr extends ffi.Struct {
  @sa_family_t()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> sa_data;
}

typedef sa_family_t = ffi.UnsignedShort;
typedef Dartsa_family_t = int;

final class sockaddr_storage extends ffi.Struct {
  @sa_family_t()
  external int ss_family;

  @ffi.Array.multi([118])
  external ffi.Array<ffi.Char> __ss_padding;

  @ffi.UnsignedLong()
  external int __ss_align;
}

final class msghdr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> msg_name;

  @socklen_t()
  external int msg_namelen;

  external ffi.Pointer<iovec> msg_iov;

  @ffi.Size()
  external int msg_iovlen;

  external ffi.Pointer<ffi.Void> msg_control;

  @ffi.Size()
  external int msg_controllen;

  @ffi.Int()
  external int msg_flags;
}

typedef socklen_t = ffi.UnsignedInt;
typedef Dartsocklen_t = int;

final class cmsghdr extends ffi.Opaque {}

final class linger extends ffi.Struct {
  @ffi.Int()
  external int l_onoff;

  @ffi.Int()
  external int l_linger;
}

final class osockaddr extends ffi.Struct {
  @ffi.UnsignedShort()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.UnsignedChar> sa_data;
}

typedef ssize_t = ffi.Long;
typedef Dartssize_t = int;

final class in_addr extends ffi.Struct {
  @in_addr_t()
  external int s_addr;
}

typedef in_addr_t = ffi.Uint32;
typedef Dartin_addr_t = int;

final class ip_opts extends ffi.Struct {
  external in_addr ip_dst;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> ip_opts1;
}

final class in_pktinfo extends ffi.Struct {
  @ffi.Int()
  external int ipi_ifindex;

  external in_addr ipi_spec_dst;

  external in_addr ipi_addr;
}

final class in6_addr extends ffi.Struct {
  external UnnamedUnion2 __in6_u;
}

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> __u6_addr8;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint16> __u6_addr16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> __u6_addr32;
}

final class sockaddr_in extends ffi.Struct {
  @sa_family_t()
  external int sin_family;

  @in_port_t()
  external int sin_port;

  external in_addr sin_addr;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> sin_zero;
}

typedef in_port_t = ffi.Uint16;
typedef Dartin_port_t = int;

final class sockaddr_in6 extends ffi.Struct {
  @sa_family_t()
  external int sin6_family;

  @in_port_t()
  external int sin6_port;

  @ffi.Uint32()
  external int sin6_flowinfo;

  external in6_addr sin6_addr;

  @ffi.Uint32()
  external int sin6_scope_id;
}

final class ip_mreq extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;
}

final class ip_mreqn extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_address;

  @ffi.Int()
  external int imr_ifindex;
}

final class ip_mreq_source extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;

  external in_addr imr_sourceaddr;
}

final class ipv6_mreq extends ffi.Struct {
  external in6_addr ipv6mr_multiaddr;

  @ffi.UnsignedInt()
  external int ipv6mr_interface;
}

final class group_req extends ffi.Struct {
  @ffi.Uint32()
  external int gr_interface;

  external sockaddr_storage gr_group;
}

final class group_source_req extends ffi.Struct {
  @ffi.Uint32()
  external int gsr_interface;

  external sockaddr_storage gsr_group;

  external sockaddr_storage gsr_source;
}

final class ip_msfilter extends ffi.Struct {
  external in_addr imsf_multiaddr;

  external in_addr imsf_interface;

  @ffi.Uint32()
  external int imsf_fmode;

  @ffi.Uint32()
  external int imsf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<in_addr> imsf_slist;
}

final class group_filter extends ffi.Struct {
  @ffi.Uint32()
  external int gf_interface;

  external sockaddr_storage gf_group;

  @ffi.Uint32()
  external int gf_fmode;

  @ffi.Uint32()
  external int gf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<sockaddr_storage> gf_slist;
}

final class sockaddr_un extends ffi.Struct {
  @sa_family_t()
  external int sun_family;

  @ffi.Array.multi([108])
  external ffi.Array<ffi.Char> sun_path;
}

final class transport_client_configuration extends ffi.Struct {
  @ffi.Uint64()
  external int socket_configuration_flags;

  @ffi.Uint32()
  external int socket_receive_buffer_size;

  @ffi.Uint32()
  external int socket_send_buffer_size;

  @ffi.Uint32()
  external int socket_receive_low_at;

  @ffi.Uint32()
  external int socket_send_low_at;

  @ffi.Uint16()
  external int ip_ttl;

  @ffi.Uint32()
  external int tcp_keep_alive_idle;

  @ffi.Uint32()
  external int tcp_keep_alive_max_count;

  @ffi.Uint32()
  external int tcp_keep_alive_individual_count;

  @ffi.Uint32()
  external int tcp_max_segment_size;

  @ffi.Uint16()
  external int tcp_syn_count;

  external ffi.Pointer<ip_mreqn> ip_multicast_interface;

  @ffi.Uint32()
  external int ip_multicast_ttl;
}

final class transport_client extends ffi.Struct {
  @ffi.Int()
  external int fd;

  external sockaddr_in inet_destination_address;

  external sockaddr_in inet_source_address;

  external sockaddr_un unix_destination_address;

  external sockaddr_un unix_source_address;

  @socklen_t()
  external int client_address_length;

  @ffi.Int32()
  external int family;
}

typedef transport_client_t = transport_client;
typedef transport_client_configuration_t = transport_client_configuration;

final class mh_events_node_t extends ffi.Struct {
  @ffi.Uint64()
  external int data;

  @ffi.Int64()
  external int timeout;

  @ffi.Uint64()
  external int timestamp;

  @ffi.Int()
  external int fd;
}

final class mh_events_t extends ffi.Struct {
  external ffi.Pointer<mh_events_node_t> p;

  external ffi.Pointer<ffi.Uint32> b;

  @mh_int_t()
  external int n_buckets;

  @mh_int_t()
  external int n_dirty;

  @mh_int_t()
  external int size;

  @mh_int_t()
  external int upper_bound;

  @mh_int_t()
  external int prime;

  @mh_int_t()
  external int resize_cnt;

  @mh_int_t()
  external int resize_position;

  @mh_int_t()
  external int batch;

  external ffi.Pointer<mh_events_t> shadow;
}

typedef mh_int_t = ffi.Uint32;
typedef Dartmh_int_t = int;

final class transport_server_configuration extends ffi.Struct {
  @ffi.Int32()
  external int socket_max_connections;

  @ffi.Uint64()
  external int socket_configuration_flags;

  @ffi.Uint32()
  external int socket_receive_buffer_size;

  @ffi.Uint32()
  external int socket_send_buffer_size;

  @ffi.Uint32()
  external int socket_receive_low_at;

  @ffi.Uint32()
  external int socket_send_low_at;

  @ffi.Uint16()
  external int ip_ttl;

  @ffi.Uint32()
  external int tcp_keep_alive_idle;

  @ffi.Uint32()
  external int tcp_keep_alive_max_count;

  @ffi.Uint32()
  external int tcp_keep_alive_individual_count;

  @ffi.Uint32()
  external int tcp_max_segment_size;

  @ffi.Uint16()
  external int tcp_syn_count;

  external ffi.Pointer<ip_mreqn> ip_multicast_interface;

  @ffi.Uint32()
  external int ip_multicast_ttl;
}

final class transport_server extends ffi.Struct {
  @ffi.Int()
  external int fd;

  @ffi.Int32()
  external int family;

  external sockaddr_in inet_server_address;

  external sockaddr_un unix_server_address;

  @socklen_t()
  external int server_address_length;
}

typedef transport_server_t = transport_server;
typedef transport_server_configuration_t = transport_server_configuration;

final class transport_worker_configuration extends ffi.Struct {
  @ffi.Uint16()
  external int buffers_count;

  @ffi.Uint32()
  external int buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.UnsignedInt()
  external int ring_flags;

  @ffi.Uint64()
  external int timeout_checker_period_millis;

  @ffi.Uint32()
  external int base_delay_micros;

  @ffi.Double()
  external double delay_randomization_factor;

  @ffi.Uint64()
  external int max_delay_micros;

  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;

  @ffi.Bool()
  external bool trace;
}

final class transport_worker extends ffi.Struct {
  @ffi.Uint8()
  external int id;

  external transport_buffers_pool free_buffers;

  external ffi.Pointer<io_uring> ring;

  external ffi.Pointer<iovec> buffers;

  @ffi.Uint32()
  external int buffer_size;

  @ffi.Uint16()
  external int buffers_count;

  @ffi.Uint64()
  external int timeout_checker_period_millis;

  @ffi.Uint32()
  external int base_delay_micros;

  @ffi.Double()
  external double delay_randomization_factor;

  @ffi.Uint64()
  external int max_delay_micros;

  external ffi.Pointer<msghdr> inet_used_messages;

  external ffi.Pointer<msghdr> unix_used_messages;

  external ffi.Pointer<mh_events_t> events;

  @ffi.Size()
  external int ring_size;

  @ffi.Int()
  external int ring_flags;

  external ffi.Pointer<ffi.Pointer<io_uring_cqe>> cqes;

  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;

  @ffi.Bool()
  external bool trace;
}

final class io_uring_cqe extends ffi.Opaque {}

typedef transport_worker_t = transport_worker;
typedef transport_worker_configuration_t = transport_worker_configuration;
typedef transport_ip_mreqn = ip_mreqn;

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_CTRUNC = 8;

const int MSG_PROXY = 16;

const int MSG_TRUNC = 32;

const int MSG_DONTWAIT = 64;

const int MSG_EOR = 128;

const int MSG_WAITALL = 256;

const int MSG_FIN = 512;

const int MSG_SYN = 1024;

const int MSG_CONFIRM = 2048;

const int MSG_RST = 4096;

const int MSG_ERRQUEUE = 8192;

const int MSG_NOSIGNAL = 16384;

const int MSG_MORE = 32768;

const int MSG_WAITFORONE = 65536;

const int MSG_BATCH = 262144;

const int MSG_ZEROCOPY = 67108864;

const int MSG_FASTOPEN = 536870912;

const int MSG_CMSG_CLOEXEC = 1073741824;

const int SCM_RIGHTS = 1;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int IPPROTO_IP = 0;

const int IPPROTO_ICMP = 1;

const int IPPROTO_IGMP = 2;

const int IPPROTO_IPIP = 4;

const int IPPROTO_TCP = 6;

const int IPPROTO_EGP = 8;

const int IPPROTO_PUP = 12;

const int IPPROTO_UDP = 17;

const int IPPROTO_IDP = 22;

const int IPPROTO_TP = 29;

const int IPPROTO_DCCP = 33;

const int IPPROTO_IPV6 = 41;

const int IPPROTO_RSVP = 46;

const int IPPROTO_GRE = 47;

const int IPPROTO_ESP = 50;

const int IPPROTO_AH = 51;

const int IPPROTO_MTP = 92;

const int IPPROTO_BEETPH = 94;

const int IPPROTO_ENCAP = 98;

const int IPPROTO_PIM = 103;

const int IPPROTO_COMP = 108;

const int IPPROTO_L2TP = 115;

const int IPPROTO_SCTP = 132;

const int IPPROTO_UDPLITE = 136;

const int IPPROTO_MPLS = 137;

const int IPPROTO_ETHERNET = 143;

const int IPPROTO_RAW = 255;

const int IPPROTO_MPTCP = 262;

const int IPPROTO_MAX = 263;

const int IPPROTO_HOPOPTS = 0;

const int IPPROTO_ROUTING = 43;

const int IPPROTO_FRAGMENT = 44;

const int IPPROTO_ICMPV6 = 58;

const int IPPROTO_NONE = 59;

const int IPPROTO_DSTOPTS = 60;

const int IPPROTO_MH = 135;

const int IPPORT_ECHO = 7;

const int IPPORT_DISCARD = 9;

const int IPPORT_SYSTAT = 11;

const int IPPORT_DAYTIME = 13;

const int IPPORT_NETSTAT = 15;

const int IPPORT_FTP = 21;

const int IPPORT_TELNET = 23;

const int IPPORT_SMTP = 25;

const int IPPORT_TIMESERVER = 37;

const int IPPORT_NAMESERVER = 42;

const int IPPORT_WHOIS = 43;

const int IPPORT_MTP = 57;

const int IPPORT_TFTP = 69;

const int IPPORT_RJE = 77;

const int IPPORT_FINGER = 79;

const int IPPORT_TTYLINK = 87;

const int IPPORT_SUPDUP = 95;

const int IPPORT_EXECSERVER = 512;

const int IPPORT_LOGINSERVER = 513;

const int IPPORT_CMDSERVER = 514;

const int IPPORT_EFSSERVER = 520;

const int IPPORT_BIFFUDP = 512;

const int IPPORT_WHOSERVER = 513;

const int IPPORT_ROUTESERVER = 520;

const int IPPORT_RESERVED = 1024;

const int IPPORT_USERRESERVED = 5000;

const int FP_NAN = 0;

const int FP_INFINITE = 1;

const int FP_ZERO = 2;

const int FP_SUBNORMAL = 3;

const int FP_NORMAL = 4;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NULL = 0;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int TRANSPORT_EVENT_READ = 1;

const int TRANSPORT_EVENT_WRITE = 2;

const int TRANSPORT_EVENT_RECEIVE_MESSAGE = 4;

const int TRANSPORT_EVENT_SEND_MESSAGE = 8;

const int TRANSPORT_EVENT_ACCEPT = 16;

const int TRANSPORT_EVENT_CONNECT = 32;

const int TRANSPORT_EVENT_CLIENT = 64;

const int TRANSPORT_EVENT_FILE = 128;

const int TRANSPORT_EVENT_SERVER = 256;

const int TRANSPORT_READ_ONLY = 1;

const int TRANSPORT_WRITE_ONLY = 2;

const int TRANSPORT_READ_WRITE = 4;

const int TRANSPORT_WRITE_ONLY_APPEND = 8;

const int TRANSPORT_READ_WRITE_APPEND = 16;

const int TRANSPORT_BUFFER_USED = -1;

const int TRANSPORT_TIMEOUT_INFINITY = -1;

const int TRANSPORT_SOCKET_OPTION_SOCKET_NONBLOCK = 2;

const int TRANSPORT_SOCKET_OPTION_SOCKET_CLOCEXEC = 4;

const int TRANSPORT_SOCKET_OPTION_SOCKET_REUSEADDR = 8;

const int TRANSPORT_SOCKET_OPTION_SOCKET_REUSEPORT = 16;

const int TRANSPORT_SOCKET_OPTION_SOCKET_RCVBUF = 32;

const int TRANSPORT_SOCKET_OPTION_SOCKET_SNDBUF = 64;

const int TRANSPORT_SOCKET_OPTION_SOCKET_BROADCAST = 128;

const int TRANSPORT_SOCKET_OPTION_SOCKET_KEEPALIVE = 256;

const int TRANSPORT_SOCKET_OPTION_SOCKET_RCVLOWAT = 512;

const int TRANSPORT_SOCKET_OPTION_SOCKET_SNDLOWAT = 1024;

const int TRANSPORT_SOCKET_OPTION_IP_TTL = 2048;

const int TRANSPORT_SOCKET_OPTION_IP_ADD_MEMBERSHIP = 4096;

const int TRANSPORT_SOCKET_OPTION_IP_ADD_SOURCE_MEMBERSHIP = 8192;

const int TRANSPORT_SOCKET_OPTION_IP_DROP_MEMBERSHIP = 16384;

const int TRANSPORT_SOCKET_OPTION_IP_DROP_SOURCE_MEMBERSHIP = 32768;

const int TRANSPORT_SOCKET_OPTION_IP_FREEBIND = 65536;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_ALL = 131072;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_IF = 262144;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_LOOP = 524288;

const int TRANSPORT_SOCKET_OPTION_IP_MULTICAST_TTL = 1048576;

const int TRANSPORT_SOCKET_OPTION_TCP_QUICKACK = 2097152;

const int TRANSPORT_SOCKET_OPTION_TCP_DEFER_ACCEPT = 4194304;

const int TRANSPORT_SOCKET_OPTION_TCP_FASTOPEN = 8388608;

const int TRANSPORT_SOCKET_OPTION_TCP_KEEPIDLE = 16777216;

const int TRANSPORT_SOCKET_OPTION_TCP_KEEPCNT = 33554432;

const int TRANSPORT_SOCKET_OPTION_TCP_KEEPINTVL = 67108864;

const int TRANSPORT_SOCKET_OPTION_TCP_MAXSEG = 134217728;

const int TRANSPORT_SOCKET_OPTION_TCP_NODELAY = 268435456;

const int TRANSPORT_SOCKET_OPTION_TCP_SYNCNT = 536870912;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SOCK_DCCP = 6;

const int SOCK_PACKET = 10;

const int SOCK_CLOEXEC = 524288;

const int SOCK_NONBLOCK = 2048;

const int PF_UNSPEC = 0;

const int PF_LOCAL = 1;

const int PF_UNIX = 1;

const int PF_FILE = 1;

const int PF_INET = 2;

const int PF_AX25 = 3;

const int PF_IPX = 4;

const int PF_APPLETALK = 5;

const int PF_NETROM = 6;

const int PF_BRIDGE = 7;

const int PF_ATMPVC = 8;

const int PF_X25 = 9;

const int PF_INET6 = 10;

const int PF_ROSE = 11;

const int PF_DECnet = 12;

const int PF_NETBEUI = 13;

const int PF_SECURITY = 14;

const int PF_KEY = 15;

const int PF_NETLINK = 16;

const int PF_ROUTE = 16;

const int PF_PACKET = 17;

const int PF_ASH = 18;

const int PF_ECONET = 19;

const int PF_ATMSVC = 20;

const int PF_RDS = 21;

const int PF_SNA = 22;

const int PF_IRDA = 23;

const int PF_PPPOX = 24;

const int PF_WANPIPE = 25;

const int PF_LLC = 26;

const int PF_IB = 27;

const int PF_MPLS = 28;

const int PF_CAN = 29;

const int PF_TIPC = 30;

const int PF_BLUETOOTH = 31;

const int PF_IUCV = 32;

const int PF_RXRPC = 33;

const int PF_ISDN = 34;

const int PF_PHONET = 35;

const int PF_IEEE802154 = 36;

const int PF_CAIF = 37;

const int PF_ALG = 38;

const int PF_NFC = 39;

const int PF_VSOCK = 40;

const int PF_KCM = 41;

const int PF_QIPCRTR = 42;

const int PF_SMC = 43;

const int PF_XDP = 44;

const int PF_MCTP = 45;

const int PF_MAX = 46;

const int AF_UNSPEC = 0;

const int AF_LOCAL = 1;

const int AF_UNIX = 1;

const int AF_FILE = 1;

const int AF_INET = 2;

const int AF_AX25 = 3;

const int AF_IPX = 4;

const int AF_APPLETALK = 5;

const int AF_NETROM = 6;

const int AF_BRIDGE = 7;

const int AF_ATMPVC = 8;

const int AF_X25 = 9;

const int AF_INET6 = 10;

const int AF_ROSE = 11;

const int AF_DECnet = 12;

const int AF_NETBEUI = 13;

const int AF_SECURITY = 14;

const int AF_KEY = 15;

const int AF_NETLINK = 16;

const int AF_ROUTE = 16;

const int AF_PACKET = 17;

const int AF_ASH = 18;

const int AF_ECONET = 19;

const int AF_ATMSVC = 20;

const int AF_RDS = 21;

const int AF_SNA = 22;

const int AF_IRDA = 23;

const int AF_PPPOX = 24;

const int AF_WANPIPE = 25;

const int AF_LLC = 26;

const int AF_IB = 27;

const int AF_MPLS = 28;

const int AF_CAN = 29;

const int AF_TIPC = 30;

const int AF_BLUETOOTH = 31;

const int AF_IUCV = 32;

const int AF_RXRPC = 33;

const int AF_ISDN = 34;

const int AF_PHONET = 35;

const int AF_IEEE802154 = 36;

const int AF_CAIF = 37;

const int AF_ALG = 38;

const int AF_NFC = 39;

const int AF_VSOCK = 40;

const int AF_KCM = 41;

const int AF_QIPCRTR = 42;

const int AF_SMC = 43;

const int AF_XDP = 44;

const int AF_MCTP = 45;

const int AF_MAX = 46;

const int SOL_RAW = 255;

const int SOL_DECNET = 261;

const int SOL_X25 = 262;

const int SOL_PACKET = 263;

const int SOL_ATM = 264;

const int SOL_AAL = 265;

const int SOL_IRDA = 266;

const int SOL_NETBEUI = 267;

const int SOL_LLC = 268;

const int SOL_DCCP = 269;

const int SOL_NETLINK = 270;

const int SOL_TIPC = 271;

const int SOL_RXRPC = 272;

const int SOL_PPPOL2TP = 273;

const int SOL_BLUETOOTH = 274;

const int SOL_PNPIPE = 275;

const int SOL_RDS = 276;

const int SOL_IUCV = 277;

const int SOL_CAIF = 278;

const int SOL_ALG = 279;

const int SOL_NFC = 280;

const int SOL_KCM = 281;

const int SOL_TLS = 282;

const int SOL_XDP = 283;

const int SOL_MPTCP = 284;

const int SOL_MCTP = 285;

const int SOL_SMC = 286;

const int SOMAXCONN = 4096;

const int MSG_OOB1 = 1;

const int MSG_PEEK1 = 2;

const int MSG_DONTROUTE1 = 4;

const int MSG_CTRUNC1 = 8;

const int MSG_PROXY1 = 16;

const int MSG_TRUNC1 = 32;

const int MSG_DONTWAIT1 = 64;

const int MSG_EOR1 = 128;

const int MSG_WAITALL1 = 256;

const int MSG_FIN1 = 512;

const int MSG_SYN1 = 1024;

const int MSG_CONFIRM1 = 2048;

const int MSG_RST1 = 4096;

const int MSG_ERRQUEUE1 = 8192;

const int MSG_NOSIGNAL1 = 16384;

const int MSG_MORE1 = 32768;

const int MSG_WAITFORONE1 = 65536;

const int MSG_BATCH1 = 262144;

const int MSG_ZEROCOPY1 = 67108864;

const int MSG_FASTOPEN1 = 536870912;

const int MSG_CMSG_CLOEXEC1 = 1073741824;

const int SCM_RIGHTS1 = 1;

const int FIOSETOWN = 35073;

const int SIOCSPGRP = 35074;

const int FIOGETOWN = 35075;

const int SIOCGPGRP = 35076;

const int SIOCATMARK = 35077;

const int SIOCGSTAMP_OLD = 35078;

const int SIOCGSTAMPNS_OLD = 35079;

const int SOL_SOCKET = 1;

const int SO_DEBUG = 1;

const int SO_REUSEADDR = 2;

const int SO_TYPE = 3;

const int SO_ERROR = 4;

const int SO_DONTROUTE = 5;

const int SO_BROADCAST = 6;

const int SO_SNDBUF = 7;

const int SO_RCVBUF = 8;

const int SO_SNDBUFFORCE = 32;

const int SO_RCVBUFFORCE = 33;

const int SO_KEEPALIVE = 9;

const int SO_OOBINLINE = 10;

const int SO_NO_CHECK = 11;

const int SO_PRIORITY = 12;

const int SO_LINGER = 13;

const int SO_BSDCOMPAT = 14;

const int SO_REUSEPORT = 15;

const int SO_PASSCRED = 16;

const int SO_PEERCRED = 17;

const int SO_RCVLOWAT = 18;

const int SO_SNDLOWAT = 19;

const int SO_RCVTIMEO_OLD = 20;

const int SO_SNDTIMEO_OLD = 21;

const int SO_SECURITY_AUTHENTICATION = 22;

const int SO_SECURITY_ENCRYPTION_TRANSPORT = 23;

const int SO_SECURITY_ENCRYPTION_NETWORK = 24;

const int SO_BINDTODEVICE = 25;

const int SO_ATTACH_FILTER = 26;

const int SO_DETACH_FILTER = 27;

const int SO_GET_FILTER = 26;

const int SO_PEERNAME = 28;

const int SO_ACCEPTCONN = 30;

const int SO_PEERSEC = 31;

const int SO_PASSSEC = 34;

const int SO_MARK = 36;

const int SO_PROTOCOL = 38;

const int SO_DOMAIN = 39;

const int SO_RXQ_OVFL = 40;

const int SO_WIFI_STATUS = 41;

const int SCM_WIFI_STATUS = 41;

const int SO_PEEK_OFF = 42;

const int SO_NOFCS = 43;

const int SO_LOCK_FILTER = 44;

const int SO_SELECT_ERR_QUEUE = 45;

const int SO_BUSY_POLL = 46;

const int SO_MAX_PACING_RATE = 47;

const int SO_BPF_EXTENSIONS = 48;

const int SO_INCOMING_CPU = 49;

const int SO_ATTACH_BPF = 50;

const int SO_DETACH_BPF = 27;

const int SO_ATTACH_REUSEPORT_CBPF = 51;

const int SO_ATTACH_REUSEPORT_EBPF = 52;

const int SO_CNX_ADVICE = 53;

const int SCM_TIMESTAMPING_OPT_STATS = 54;

const int SO_MEMINFO = 55;

const int SO_INCOMING_NAPI_ID = 56;

const int SO_COOKIE = 57;

const int SCM_TIMESTAMPING_PKTINFO = 58;

const int SO_PEERGROUPS = 59;

const int SO_ZEROCOPY = 60;

const int SO_TXTIME = 61;

const int SCM_TXTIME = 61;

const int SO_BINDTOIFINDEX = 62;

const int SO_TIMESTAMP_OLD = 29;

const int SO_TIMESTAMPNS_OLD = 35;

const int SO_TIMESTAMPING_OLD = 37;

const int SO_TIMESTAMP_NEW = 63;

const int SO_TIMESTAMPNS_NEW = 64;

const int SO_TIMESTAMPING_NEW = 65;

const int SO_RCVTIMEO_NEW = 66;

const int SO_SNDTIMEO_NEW = 67;

const int SO_DETACH_REUSEPORT_BPF = 68;

const int SO_PREFER_BUSY_POLL = 69;

const int SO_BUSY_POLL_BUDGET = 70;

const int SO_NETNS_COOKIE = 71;

const int SO_BUF_LOCK = 72;

const int SO_RESERVE_MEM = 73;

const int SO_TXREHASH = 74;

const int SO_RCVMARK = 75;

const int SO_TIMESTAMP = 29;

const int SO_TIMESTAMPNS = 35;

const int SO_TIMESTAMPING = 37;

const int SO_RCVTIMEO = 20;

const int SO_SNDTIMEO = 21;

const int SCM_TIMESTAMP = 29;

const int SCM_TIMESTAMPNS = 35;

const int SCM_TIMESTAMPING = 37;

const int SHUT_RD1 = 0;

const int SHUT_WR1 = 1;

const int SHUT_RDWR1 = 2;

const int IP_OPTIONS = 4;

const int IP_HDRINCL = 3;

const int IP_TOS = 1;

const int IP_TTL = 2;

const int IP_RECVOPTS = 6;

const int IP_RECVRETOPTS = 7;

const int IP_RETOPTS = 7;

const int IP_MULTICAST_IF = 32;

const int IP_MULTICAST_TTL = 33;

const int IP_MULTICAST_LOOP = 34;

const int IP_ADD_MEMBERSHIP = 35;

const int IP_DROP_MEMBERSHIP = 36;

const int IP_UNBLOCK_SOURCE = 37;

const int IP_BLOCK_SOURCE = 38;

const int IP_ADD_SOURCE_MEMBERSHIP = 39;

const int IP_DROP_SOURCE_MEMBERSHIP = 40;

const int IP_MSFILTER = 41;

const int MCAST_JOIN_GROUP = 42;

const int MCAST_BLOCK_SOURCE = 43;

const int MCAST_UNBLOCK_SOURCE = 44;

const int MCAST_LEAVE_GROUP = 45;

const int MCAST_JOIN_SOURCE_GROUP = 46;

const int MCAST_LEAVE_SOURCE_GROUP = 47;

const int MCAST_MSFILTER = 48;

const int IP_MULTICAST_ALL = 49;

const int IP_UNICAST_IF = 50;

const int MCAST_EXCLUDE = 0;

const int MCAST_INCLUDE = 1;

const int IP_ROUTER_ALERT = 5;

const int IP_PKTINFO = 8;

const int IP_PKTOPTIONS = 9;

const int IP_PMTUDISC = 10;

const int IP_MTU_DISCOVER = 10;

const int IP_RECVERR = 11;

const int IP_RECVTTL = 12;

const int IP_RECVTOS = 13;

const int IP_MTU = 14;

const int IP_FREEBIND = 15;

const int IP_IPSEC_POLICY = 16;

const int IP_XFRM_POLICY = 17;

const int IP_PASSSEC = 18;

const int IP_TRANSPARENT = 19;

const int IP_ORIGDSTADDR = 20;

const int IP_RECVORIGDSTADDR = 20;

const int IP_MINTTL = 21;

const int IP_NODEFRAG = 22;

const int IP_CHECKSUM = 23;

const int IP_BIND_ADDRESS_NO_PORT = 24;

const int IP_RECVFRAGSIZE = 25;

const int IP_RECVERR_RFC4884 = 26;

const int IP_PMTUDISC_DONT = 0;

const int IP_PMTUDISC_WANT = 1;

const int IP_PMTUDISC_DO = 2;

const int IP_PMTUDISC_PROBE = 3;

const int IP_PMTUDISC_INTERFACE = 4;

const int IP_PMTUDISC_OMIT = 5;

const int IP_LOCAL_PORT_RANGE = 51;

const int SOL_IP = 0;

const int IP_DEFAULT_MULTICAST_TTL = 1;

const int IP_DEFAULT_MULTICAST_LOOP = 1;

const int IP_MAX_MEMBERSHIPS = 20;

const int IPV6_ADDRFORM = 1;

const int IPV6_2292PKTINFO = 2;

const int IPV6_2292HOPOPTS = 3;

const int IPV6_2292DSTOPTS = 4;

const int IPV6_2292RTHDR = 5;

const int IPV6_2292PKTOPTIONS = 6;

const int IPV6_CHECKSUM = 7;

const int IPV6_2292HOPLIMIT = 8;

const int IPV6_NEXTHOP = 9;

const int IPV6_AUTHHDR = 10;

const int IPV6_UNICAST_HOPS = 16;

const int IPV6_MULTICAST_IF = 17;

const int IPV6_MULTICAST_HOPS = 18;

const int IPV6_MULTICAST_LOOP = 19;

const int IPV6_JOIN_GROUP = 20;

const int IPV6_LEAVE_GROUP = 21;

const int IPV6_ROUTER_ALERT = 22;

const int IPV6_MTU_DISCOVER = 23;

const int IPV6_MTU = 24;

const int IPV6_RECVERR = 25;

const int IPV6_V6ONLY = 26;

const int IPV6_JOIN_ANYCAST = 27;

const int IPV6_LEAVE_ANYCAST = 28;

const int IPV6_MULTICAST_ALL = 29;

const int IPV6_ROUTER_ALERT_ISOLATE = 30;

const int IPV6_RECVERR_RFC4884 = 31;

const int IPV6_IPSEC_POLICY = 34;

const int IPV6_XFRM_POLICY = 35;

const int IPV6_HDRINCL = 36;

const int IPV6_RECVPKTINFO = 49;

const int IPV6_PKTINFO = 50;

const int IPV6_RECVHOPLIMIT = 51;

const int IPV6_HOPLIMIT = 52;

const int IPV6_RECVHOPOPTS = 53;

const int IPV6_HOPOPTS = 54;

const int IPV6_RTHDRDSTOPTS = 55;

const int IPV6_RECVRTHDR = 56;

const int IPV6_RTHDR = 57;

const int IPV6_RECVDSTOPTS = 58;

const int IPV6_DSTOPTS = 59;

const int IPV6_RECVPATHMTU = 60;

const int IPV6_PATHMTU = 61;

const int IPV6_DONTFRAG = 62;

const int IPV6_RECVTCLASS = 66;

const int IPV6_TCLASS = 67;

const int IPV6_AUTOFLOWLABEL = 70;

const int IPV6_ADDR_PREFERENCES = 72;

const int IPV6_MINHOPCOUNT = 73;

const int IPV6_ORIGDSTADDR = 74;

const int IPV6_RECVORIGDSTADDR = 74;

const int IPV6_TRANSPARENT = 75;

const int IPV6_UNICAST_IF = 76;

const int IPV6_RECVFRAGSIZE = 77;

const int IPV6_FREEBIND = 78;

const int IPV6_ADD_MEMBERSHIP = 20;

const int IPV6_DROP_MEMBERSHIP = 21;

const int IPV6_RXHOPOPTS = 54;

const int IPV6_RXDSTOPTS = 59;

const int IPV6_PMTUDISC_DONT = 0;

const int IPV6_PMTUDISC_WANT = 1;

const int IPV6_PMTUDISC_DO = 2;

const int IPV6_PMTUDISC_PROBE = 3;

const int IPV6_PMTUDISC_INTERFACE = 4;

const int IPV6_PMTUDISC_OMIT = 5;

const int SOL_IPV6 = 41;

const int SOL_ICMPV6 = 58;

const int IPV6_RTHDR_LOOSE = 0;

const int IPV6_RTHDR_STRICT = 1;

const int IPV6_RTHDR_TYPE_0 = 0;

const int IPPROTO_IP1 = 0;

const int IPPROTO_ICMP1 = 1;

const int IPPROTO_IGMP1 = 2;

const int IPPROTO_IPIP1 = 4;

const int IPPROTO_TCP1 = 6;

const int IPPROTO_EGP1 = 8;

const int IPPROTO_PUP1 = 12;

const int IPPROTO_UDP1 = 17;

const int IPPROTO_IDP1 = 22;

const int IPPROTO_TP1 = 29;

const int IPPROTO_DCCP1 = 33;

const int IPPROTO_IPV61 = 41;

const int IPPROTO_RSVP1 = 46;

const int IPPROTO_GRE1 = 47;

const int IPPROTO_ESP1 = 50;

const int IPPROTO_AH1 = 51;

const int IPPROTO_MTP1 = 92;

const int IPPROTO_BEETPH1 = 94;

const int IPPROTO_ENCAP1 = 98;

const int IPPROTO_PIM1 = 103;

const int IPPROTO_COMP1 = 108;

const int IPPROTO_L2TP1 = 115;

const int IPPROTO_SCTP1 = 132;

const int IPPROTO_UDPLITE1 = 136;

const int IPPROTO_MPLS1 = 137;

const int IPPROTO_ETHERNET1 = 143;

const int IPPROTO_RAW1 = 255;

const int IPPROTO_MPTCP1 = 262;

const int IPPROTO_HOPOPTS1 = 0;

const int IPPROTO_ROUTING1 = 43;

const int IPPROTO_FRAGMENT1 = 44;

const int IPPROTO_ICMPV61 = 58;

const int IPPROTO_NONE1 = 59;

const int IPPROTO_DSTOPTS1 = 60;

const int IPPROTO_MH1 = 135;

const int IN_CLASSA_NET = 4278190080;

const int IN_CLASSA_NSHIFT = 24;

const int IN_CLASSA_HOST = 16777215;

const int IN_CLASSA_MAX = 128;

const int IN_CLASSB_NET = 4294901760;

const int IN_CLASSB_NSHIFT = 16;

const int IN_CLASSB_HOST = 65535;

const int IN_CLASSB_MAX = 65536;

const int IN_CLASSC_NET = 4294967040;

const int IN_CLASSC_NSHIFT = 8;

const int IN_CLASSC_HOST = 255;

const int INADDR_ANY = 0;

const int INADDR_BROADCAST = 4294967295;

const int INADDR_NONE = 4294967295;

const int INADDR_DUMMY = 3221225480;

const int IN_LOOPBACKNET = 127;

const int INADDR_LOOPBACK = 2130706433;

const int INADDR_UNSPEC_GROUP = 3758096384;

const int INADDR_ALLHOSTS_GROUP = 3758096385;

const int INADDR_ALLRTRS_GROUP = 3758096386;

const int INADDR_ALLSNOOPERS_GROUP = 3758096490;

const int INADDR_MAX_LOCAL_GROUP = 3758096639;

const int INET_ADDRSTRLEN = 16;

const int INET6_ADDRSTRLEN = 46;

const int MH_SOURCE = 1;

const int MH_INCREMENTAL_RESIZE = 1;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double INFINITY = double.infinity;

const double NAN = double.nan;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int FP_NAN1 = 0;

const int FP_INFINITE1 = 1;

const int FP_ZERO1 = 2;

const int FP_SUBNORMAL1 = 3;

const int FP_NORMAL1 = 4;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;

const int MH_TYPEDEFS = 1;
