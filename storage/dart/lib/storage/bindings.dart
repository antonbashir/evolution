// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field
import 'dart:ffi' as ffi;
import 'package:interactor/interactor.dart' as interactor;

@ffi.Native<ffi.Void Function(ffi.Pointer<tarantool_box>)>(
    symbol: 'tarantool_initialize_box',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_initialize_box(
  ffi.Pointer<tarantool_box> box,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<tarantool_box>)>(
    symbol: 'tarantool_destroy_box',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_destroy_box(
  ffi.Pointer<tarantool_box> box,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_evaluate', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_evaluate(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_call', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_call(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_iterator',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_iterator(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_count',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_count(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_length',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_length(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_truncate',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_truncate(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_put_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_put_single(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_insert_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_insert_single(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_update_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_update_single(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_delete_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_delete_single(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_put_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_put_many(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_insert_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_insert_many(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_update_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_update_many(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_delete_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_delete_many(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_upsert',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_upsert(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_get', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_space_get(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_min', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_space_min(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_max', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_space_max(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_select',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_select(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_space_id_by_name',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_space_id_by_name(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_index_iterator',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_iterator(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_index_count',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_count(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_index_length',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_length(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_index_id_by_name',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_id_by_name(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_index_get', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_index_get(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_index_min', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_index_min(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_index_max', assetId: 'tarantool-bindings', isLeaf: true)
external void tarantool_index_max(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_index_select',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_select(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_index_update_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_update_single(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_index_update_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_index_update_many(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_iterator_next_single',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_iterator_next_single(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_iterator_next_many',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_iterator_next_many(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_iterator_destroy',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_iterator_destroy(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_free_output_buffer',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_output_buffer(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_free_output_port',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_output_port(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>(
    symbol: 'tarantool_free_output_tuple',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_output_tuple(
  ffi.Pointer<interactor.interactor_message> message,
);

@ffi.Native<
        ffi.Bool Function(
            ffi.Pointer<tarantool_configuration>, ffi.Pointer<tarantool_box>)>(
    symbol: 'tarantool_initialize', assetId: 'tarantool-bindings', isLeaf: true)
external bool tarantool_initialize(
  ffi.Pointer<tarantool_configuration> configuration,
  ffi.Pointer<tarantool_box> box,
);

@ffi.Native<ffi.Bool Function()>(
    symbol: 'tarantool_initialized',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external bool tarantool_initialized();

@ffi.Native<ffi.Pointer<ffi.Char> Function()>(
    symbol: 'tarantool_status', assetId: 'tarantool-bindings', isLeaf: true)
external ffi.Pointer<ffi.Char> tarantool_status();

@ffi.Native<ffi.Int Function()>(
    symbol: 'tarantool_is_read_only',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external int tarantool_is_read_only();

@ffi.Native<ffi.Pointer<ffi.Char> Function()>(
    symbol: 'tarantool_initialization_error',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Char> tarantool_initialization_error();

@ffi.Native<ffi.Pointer<ffi.Char> Function()>(
    symbol: 'tarantool_shutdown_error',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Char> tarantool_shutdown_error();

@ffi.Native<ffi.Bool Function()>(
    symbol: 'tarantool_shutdown', assetId: 'tarantool-bindings', isLeaf: true)
external bool tarantool_shutdown();

@ffi.Native<ffi.Int Function(ffi.Pointer<tarantool_executor_configuration>)>(
    symbol: 'tarantool_executor_initialize',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external int tarantool_executor_initialize(
  ffi.Pointer<tarantool_executor_configuration> configuration,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<tarantool_executor_configuration>)>(
    symbol: 'tarantool_executor_start',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_executor_start(
  ffi.Pointer<tarantool_executor_configuration> configuration,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'tarantool_executor_stop',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_executor_stop();

@ffi.Native<ffi.Void Function()>(
    symbol: 'tarantool_executor_destroy',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_executor_destroy();

@ffi.Native<ffi.Int Function()>(
    symbol: 'tarantool_executor_descriptor',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external int tarantool_executor_descriptor();

@ffi.Native<
        ffi.Int Function(ffi.Pointer<tarantool_factory>,
            ffi.Pointer<tarantool_factory_configuration>)>(
    symbol: 'tarantool_factory_initialize',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external int tarantool_factory_initialize(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<tarantool_factory_configuration> configuration,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<tarantool_factory>, ffi.Size)>(
    symbol: 'tarantool_create_string',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Char> tarantool_create_string(
  ffi.Pointer<tarantool_factory> factory1,
  int size,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<tarantool_factory>, ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'tarantool_free_string',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_free_string(
  ffi.Pointer<tarantool_factory> factory1,
  ffi.Pointer<ffi.Char> string,
  int size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<tarantool_factory>)>(
    symbol: 'tarantool_factory_destroy',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external void tarantool_factory_destroy(
  ffi.Pointer<tarantool_factory> factory1,
);

@ffi.Native<
        ffi.Pointer<tarantool_tuple_port_entry> Function(
            ffi.Pointer<tarantool_tuple_port>)>(
    symbol: 'tarantool_port_first', assetId: 'tarantool-bindings', isLeaf: true)
external ffi.Pointer<tarantool_tuple_port_entry> tarantool_port_first(
  ffi.Pointer<tarantool_tuple_port> port,
);

@ffi.Native<
        ffi.Pointer<tarantool_tuple_port_entry> Function(
            ffi.Pointer<tarantool_tuple_port_entry>)>(
    symbol: 'tarantool_port_entry_next',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<tarantool_tuple_port_entry> tarantool_port_entry_next(
  ffi.Pointer<tarantool_tuple_port_entry> current,
);

@ffi.Native<
        ffi.Pointer<tarantool_tuple> Function(
            ffi.Pointer<tarantool_tuple_port_entry>)>(
    symbol: 'tarantool_port_entry_tuple',
    assetId: 'tarantool-bindings',
    isLeaf: true)
external ffi.Pointer<tarantool_tuple> tarantool_port_entry_tuple(
  ffi.Pointer<tarantool_tuple_port_entry> current,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<tarantool_tuple>)>(
    symbol: 'tarantool_tuple_size', assetId: 'tarantool-bindings', isLeaf: true)
external int tarantool_tuple_size(
  ffi.Pointer<tarantool_tuple> tuple,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<tarantool_tuple>)>(
    symbol: 'tarantool_tuple_data', assetId: 'tarantool-bindings', isLeaf: true)
external ffi.Pointer<ffi.Void> tarantool_tuple_data(
  ffi.Pointer<tarantool_tuple> tuple,
);

final class tarantool_box extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_evaluate_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_call_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_iterator_next_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_iterator_next_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_iterator_destroy_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_free_output_buffer_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_id_by_name_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_count_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_length_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_iterator_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_insert_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_insert_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_put_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_put_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_delete_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_delete_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_update_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_update_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_get_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_min_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_max_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_truncate_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_space_upsert_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_index_count_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_index_length_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_index_iterator_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_index_get_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_index_max_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_index_min_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_index_update_single_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_index_update_many_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_index_select_address;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<interactor.interactor_message>)>>
      tarantool_index_id_by_name_address;
}

final class tarantool_space_request extends ffi.Struct {
  @ffi.Size()
  external int tuple_size;

  external ffi.Pointer<ffi.Uint8> tuple;

  @ffi.Uint32()
  external int space_id;

  external interactor.interactor_message message;
}

final class tarantool_space_count_request extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  external ffi.Pointer<ffi.Uint8> key;

  @ffi.Uint32()
  external int space_id;

  @ffi.Int()
  external int iterator_type;

  external interactor.interactor_message message;
}

final class tarantool_space_select_request extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  external ffi.Pointer<ffi.Uint8> key;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int offset;

  @ffi.Uint32()
  external int limit;

  @ffi.Int()
  external int iterator_type;

  external interactor.interactor_message message;
}

final class tarantool_space_update_request extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  @ffi.Size()
  external int operations_size;

  external ffi.Pointer<ffi.Uint8> key;

  external ffi.Pointer<ffi.Uint8> operations;

  @ffi.Uint32()
  external int space_id;

  external interactor.interactor_message message;
}

final class tarantool_space_upsert_request extends ffi.Struct {
  @ffi.Size()
  external int tuple_size;

  external ffi.Pointer<ffi.Uint8> tuple;

  external ffi.Pointer<ffi.Uint8> operations;

  @ffi.Size()
  external int operations_size;

  @ffi.Uint32()
  external int space_id;

  external interactor.interactor_message message;
}

final class tarantool_space_iterator_request extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  external ffi.Pointer<ffi.Uint8> key;

  @ffi.Uint32()
  external int space_id;

  @ffi.Int()
  external int type;

  external interactor.interactor_message message;
}

final class tarantool_index_request extends ffi.Struct {
  @ffi.Size()
  external int tuple_size;

  external ffi.Pointer<ffi.Uint8> tuple;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;

  external interactor.interactor_message message;
}

final class tarantool_index_count_request extends ffi.Struct {
  @ffi.Size()
  external int key_size;

  external ffi.Pointer<ffi.Uint8> key;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;

  @ffi.Int()
  external int iterator_type;

  external interactor.interactor_message message;
}

final class tarantool_index_id_by_name_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Size()
  external int name_length;

  @ffi.Uint32()
  external int space_id;

  external interactor.interactor_message message;
}

final class tarantool_index_update_request extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> key;

  @ffi.Size()
  external int key_size;

  external ffi.Pointer<ffi.Uint8> operations;

  @ffi.Size()
  external int operations_size;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;

  external interactor.interactor_message message;
}

final class tarantool_call_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> function;

  external ffi.Pointer<ffi.Uint8> input;

  @ffi.Size()
  external int input_size;

  @ffi.Uint32()
  external int function_length;

  external interactor.interactor_message message;
}

final class tarantool_evaluate_request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> expression;

  external ffi.Pointer<ffi.Uint8> input;

  @ffi.Size()
  external int input_size;

  @ffi.Uint32()
  external int expression_length;

  external interactor.interactor_message message;
}

final class tarantool_index_iterator_request extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> key;

  @ffi.Size()
  external int key_size;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;

  @ffi.Int()
  external int type;

  external interactor.interactor_message message;
}

final class tarantool_index_select_request extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> key;

  @ffi.Size()
  external int key_size;

  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;

  @ffi.Uint32()
  external int offset;

  @ffi.Uint32()
  external int limit;

  @ffi.Int()
  external int iterator_type;

  external interactor.interactor_message message;
}

final class tarantool_index_id_request extends ffi.Struct {
  @ffi.Uint32()
  external int space_id;

  @ffi.Uint32()
  external int index_id;
}

final class tarantool_configuration extends ffi.Struct {
  external ffi.Pointer<ffi.Char> initial_script;

  external ffi.Pointer<ffi.Char> library_path;

  external ffi.Pointer<ffi.Char> binary_path;

  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Size()
  external int slab_size;

  @ffi.Size()
  external int ring_size;

  @ffi.Uint64()
  external int initialization_timeout_seconds;

  @ffi.Uint64()
  external int shutdown_timeout_seconds;

  @ffi.Size()
  external int box_output_buffer_capacity;

  @ffi.Size()
  external int executor_ring_size;

  @ffi.Int32()
  external int ring_flags;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;
}

final class tarantool_executor_configuration extends ffi.Struct {
  @ffi.Size()
  external int executor_ring_size;

  external ffi.Pointer<tarantool_configuration> configuration;

  @ffi.Uint32()
  external int interactor_id;
}

final class mempool extends ffi.Opaque {}

final class small_alloc extends ffi.Opaque {}

final class memory extends ffi.Opaque {}

final class tarantool_factory extends ffi.Struct {
  external ffi.Pointer<tarantool_factory_memory> memory;

  external ffi.Pointer<tarantool_factory_small_alloc> tarantool_datas;
}

typedef tarantool_factory_memory = memory;
typedef tarantool_factory_small_alloc = small_alloc;

final class tarantool_factory_configuration extends ffi.Struct {
  @ffi.Size()
  external int quota_size;

  @ffi.Size()
  external int slab_size;

  @ffi.Size()
  external int preallocation_size;
}

final class tuple extends ffi.Opaque {}

final class port extends ffi.Opaque {}

final class tuple_iterator extends ffi.Opaque {}

final class port_c_entry extends ffi.Opaque {}

typedef tarantool_tuple_port_entry = port_c_entry;
typedef tarantool_tuple_port = port;
typedef tarantool_tuple = tuple;
