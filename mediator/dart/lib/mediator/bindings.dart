// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field
import 'dart:ffi' as ffi;

@ffi.Native<
        ffi.Int32 Function(
            ffi.Pointer<mediator_dart>,
            ffi.Pointer<mediator_dart_configuration>,
            ffi.Pointer<mediator_dart_notifier>,
            ffi.Uint32)>(
    symbol: 'mediator_dart_initialize',
    assetId: 'mediator-bindings',
    isLeaf: true)
external int mediator_dart_initialize(
  ffi.Pointer<mediator_dart> mediator,
  ffi.Pointer<mediator_dart_configuration> configuration,
  ffi.Pointer<mediator_dart_notifier> notifier,
  int id,
);

@ffi.Native<ffi.Int8 Function(ffi.Pointer<mediator_dart>, ffi.Int64)>(
    symbol: 'mediator_dart_register',
    assetId: 'mediator-bindings',
    isLeaf: true)
external int mediator_dart_register(
  ffi.Pointer<mediator_dart> mediator,
  int callback,
);

@ffi.Native<ffi.Int8 Function(ffi.Pointer<mediator_dart>)>(
    symbol: 'mediator_dart_unregister',
    assetId: 'mediator-bindings',
    isLeaf: true)
external int mediator_dart_unregister(
  ffi.Pointer<mediator_dart> mediator,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<mediator_dart>)>(
    symbol: 'mediator_dart_peek', assetId: 'mediator-bindings', isLeaf: true)
external int mediator_dart_peek(
  ffi.Pointer<mediator_dart> mediator,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<mediator_dart>)>(
    symbol: 'mediator_dart_submit', assetId: 'mediator-bindings', isLeaf: true)
external void mediator_dart_submit(
  ffi.Pointer<mediator_dart> mediator,
);

@ffi.Native<ffi.Int8 Function(ffi.Pointer<mediator_dart>)>(
    symbol: 'mediator_dart_awake', assetId: 'mediator-bindings', isLeaf: true)
external int mediator_dart_awake(
  ffi.Pointer<mediator_dart> mediator,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<mediator_dart>, ffi.Uint32)>(
    symbol: 'mediator_dart_sleep', assetId: 'mediator-bindings', isLeaf: true)
external void mediator_dart_sleep(
  ffi.Pointer<mediator_dart> mediator,
  int completions,
);

@ffi.Native<
        ffi.Int8 Function(ffi.Pointer<mediator_dart>, ffi.Int32,
            ffi.Pointer<mediator_message>)>(
    symbol: 'mediator_dart_call_native',
    assetId: 'mediator-bindings',
    isLeaf: true)
external int mediator_dart_call_native(
  ffi.Pointer<mediator_dart> mediator,
  int target_ring_fd,
  ffi.Pointer<mediator_message> message,
);

@ffi.Native<
        ffi.Int8 Function(
            ffi.Pointer<mediator_dart>, ffi.Pointer<mediator_message>)>(
    symbol: 'mediator_dart_callback_to_native',
    assetId: 'mediator-bindings',
    isLeaf: true)
external int mediator_dart_callback_to_native(
  ffi.Pointer<mediator_dart> mediator,
  ffi.Pointer<mediator_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<mediator_dart>, ffi.Uint32)>(
    symbol: 'mediator_dart_completions_advance',
    assetId: 'mediator-bindings',
    isLeaf: true)
external void mediator_dart_completions_advance(
  ffi.Pointer<mediator_dart> mediator,
  int count,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<mediator_dart>)>(
    symbol: 'mediator_dart_destroy', assetId: 'mediator-bindings', isLeaf: true)
external void mediator_dart_destroy(
  ffi.Pointer<mediator_dart> mediator,
);

@ffi.Native<
        ffi.Bool Function(ffi.Pointer<mediator_dart_notifier>,
            ffi.Pointer<mediator_dart_notifier_configuration>)>(
    symbol: 'mediator_dart_notifier_initialize',
    assetId: 'mediator-bindings',
    isLeaf: true)
external bool mediator_dart_notifier_initialize(
  ffi.Pointer<mediator_dart_notifier> notifier,
  ffi.Pointer<mediator_dart_notifier_configuration> configuration,
);

@ffi.Native<ffi.Bool Function(ffi.Pointer<mediator_dart_notifier>)>(
    symbol: 'mediator_dart_notifier_shutdown',
    assetId: 'mediator-bindings',
    isLeaf: true)
external bool mediator_dart_notifier_shutdown(
  ffi.Pointer<mediator_dart_notifier> notifier,
);

final class mediator_dart_configuration extends ffi.Struct {
  @ffi.Size()
  external int quota_size;

  @ffi.Size()
  external int preallocation_size;

  @ffi.Size()
  external int slab_size;

  @ffi.Size()
  external int static_buffers_capacity;

  @ffi.Size()
  external int static_buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.Uint32()
  external int ring_flags;

  @ffi.Bool()
  external bool trace;
}

final class mediator_native_configuration extends ffi.Struct {
  @ffi.Uint64()
  external int completion_wait_timeout_millis;

  @ffi.Size()
  external int quota_size;

  @ffi.Size()
  external int preallocation_size;

  @ffi.Size()
  external int slab_size;

  @ffi.Size()
  external int static_buffers_capacity;

  @ffi.Size()
  external int static_buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.Int32()
  external int ring_flags;

  @ffi.Uint32()
  external int completion_wait_count;
}

final class mediator_dart_notifier_configuration extends ffi.Struct {
  @ffi.Size()
  external int ring_size;

  @ffi.Size()
  external int ring_flags;

  @ffi.Uint64()
  external int initialization_timeout_seconds;

  @ffi.Uint64()
  external int shutdown_timeout_seconds;

  @ffi.Bool()
  external bool trace;
}

final class mediator_message extends ffi.Struct {
  @ffi.Uint64()
  external int id;

  @ffi.Uint64()
  external int source;

  @ffi.Uint64()
  external int target;

  @ffi.Uint64()
  external int owner;

  @ffi.Uint64()
  external int method;

  external ffi.Pointer<ffi.Void> input;

  @ffi.Size()
  external int input_size;

  external ffi.Pointer<ffi.Void> output;

  @ffi.Size()
  external int output_size;

  @ffi.Uint16()
  external int flags;
}

final class mediator_completion_event extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int user_data;

  @ffi.Int()
  external int res;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedLongLong> big_cqe;
}

final class io_uring extends ffi.Opaque {}

final class io_uring_cqe extends ffi.Opaque {}

final class mediator_dart extends ffi.Struct {
  @ffi.Int64()
  external int callback;

  external ffi.Pointer<mediator_dart_notifier> notifier;

  external ffi.Pointer<io_uring> ring;

  external ffi.Pointer<ffi.Pointer<mediator_dart_completion_event>> completions;

  external mediator_dart_configuration configuration;

  @ffi.Int32()
  external int descriptor;

  @ffi.Uint32()
  external int id;

  @ffi.Int8()
  external int state;
}

final class mediator_dart_notifier extends ffi.Struct {
  external mediator_dart_notifier_configuration configuration;

  external ffi.Pointer<ffi.Char> initialization_error;

  external ffi.Pointer<ffi.Char> shutdown_error;

  external ffi.Pointer<mediator_dart_notifier_thread> thread;

  external ffi.Pointer<io_uring> ring;

  @ffi.Bool()
  external bool active;

  @ffi.Bool()
  external bool initialized;

  @ffi.Int32()
  external int descriptor;
}

final class mediator_dart_notifier_thread extends ffi.Opaque {}

typedef mediator_dart_completion_event = io_uring_cqe;
