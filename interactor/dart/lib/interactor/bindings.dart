// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field
import 'dart:ffi' as ffi;

@ffi.Native<
        ffi.Int Function(ffi.Pointer<interactor_dart>,
            ffi.Pointer<interactor_dart_configuration>, ffi.Uint8)>(
    symbol: 'interactor_dart_initialize',
    assetId: 'interactor-bindings',
    isLeaf: true)
external int interactor_dart_initialize(
  ffi.Pointer<interactor_dart> interactor,
  ffi.Pointer<interactor_dart_configuration> configuration,
  int id,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<interactor_dart>)>(
    symbol: 'interactor_dart_static_buffers_get',
    assetId: 'interactor-bindings',
    isLeaf: true)
external int interactor_dart_static_buffers_get(
  ffi.Pointer<interactor_dart> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_dart>, ffi.Int32)>(
    symbol: 'interactor_dart_static_buffers_release',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_static_buffers_release(
  ffi.Pointer<interactor_dart> interactor,
  int buffer_id,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<interactor_dart>)>(
    symbol: 'interactor_dart_static_buffers_available',
    assetId: 'interactor-bindings',
    isLeaf: true)
external int interactor_dart_static_buffers_available(
  ffi.Pointer<interactor_dart> interactor,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<interactor_dart>)>(
    symbol: 'interactor_dart_static_buffers_used',
    assetId: 'interactor-bindings',
    isLeaf: true)
external int interactor_dart_static_buffers_used(
  ffi.Pointer<interactor_dart> interactor,
);

@ffi.Native<ffi.Pointer<iovec> Function(ffi.Pointer<interactor_dart>)>(
    symbol: 'interactor_dart_static_buffers_inner',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<iovec> interactor_dart_static_buffers_inner(
  ffi.Pointer<interactor_dart> interactor,
);

@ffi.Native<
        ffi.Pointer<interactor_input_buffer> Function(
            ffi.Pointer<interactor_dart>, ffi.Size)>(
    symbol: 'interactor_dart_io_buffers_allocate_input',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<interactor_input_buffer>
    interactor_dart_io_buffers_allocate_input(
  ffi.Pointer<interactor_dart> interactor,
  int initial_capacity,
);

@ffi.Native<
        ffi.Pointer<interactor_output_buffer> Function(
            ffi.Pointer<interactor_dart>, ffi.Size)>(
    symbol: 'interactor_dart_io_buffers_allocate_output',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<interactor_output_buffer>
    interactor_dart_io_buffers_allocate_output(
  ffi.Pointer<interactor_dart> interactor,
  int initial_capacity,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_dart>,
            ffi.Pointer<interactor_input_buffer>)>(
    symbol: 'interactor_dart_io_buffers_free_input',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_io_buffers_free_input(
  ffi.Pointer<interactor_dart> interactor,
  ffi.Pointer<interactor_input_buffer> buffer,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_dart>,
            ffi.Pointer<interactor_output_buffer>)>(
    symbol: 'interactor_dart_io_buffers_free_output',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_io_buffers_free_output(
  ffi.Pointer<interactor_dart> interactor,
  ffi.Pointer<interactor_output_buffer> buffer,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<interactor_input_buffer>, ffi.Size)>(
    symbol: 'interactor_dart_input_buffer_reserve',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Uint8> interactor_dart_input_buffer_reserve(
  ffi.Pointer<interactor_input_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<interactor_input_buffer>, ffi.Size)>(
    symbol: 'interactor_dart_input_buffer_allocate',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Uint8> interactor_dart_input_buffer_allocate(
  ffi.Pointer<interactor_input_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<interactor_input_buffer>, ffi.Size, ffi.Size)>(
    symbol: 'interactor_dart_input_buffer_allocate_reserve',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Uint8> interactor_dart_input_buffer_allocate_reserve(
  ffi.Pointer<interactor_input_buffer> buffer,
  int delta,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<interactor_input_buffer>)>(
    symbol: 'interactor_dart_input_buffer_read_position',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Uint8> interactor_dart_input_buffer_read_position(
  ffi.Pointer<interactor_input_buffer> buffer,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<interactor_input_buffer>)>(
    symbol: 'interactor_dart_input_buffer_write_position',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Uint8> interactor_dart_input_buffer_write_position(
  ffi.Pointer<interactor_input_buffer> buffer,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<interactor_output_buffer>, ffi.Size)>(
    symbol: 'interactor_dart_output_buffer_reserve',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Uint8> interactor_dart_output_buffer_reserve(
  ffi.Pointer<interactor_output_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<interactor_output_buffer>, ffi.Size)>(
    symbol: 'interactor_dart_output_buffer_allocate',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Uint8> interactor_dart_output_buffer_allocate(
  ffi.Pointer<interactor_output_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<interactor_output_buffer>, ffi.Size, ffi.Size)>(
    symbol: 'interactor_dart_output_buffer_allocate_reserve',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Uint8> interactor_dart_output_buffer_allocate_reserve(
  ffi.Pointer<interactor_output_buffer> buffer,
  int delta,
  int size,
);

@ffi.Native<ffi.Pointer<iovec> Function(ffi.Pointer<interactor_output_buffer>)>(
    symbol: 'interactor_dart_output_buffer_content',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<iovec> interactor_dart_output_buffer_content(
  ffi.Pointer<interactor_output_buffer> buffer,
);

@ffi.Native<
        ffi.Pointer<interactor_message> Function(ffi.Pointer<interactor_dart>)>(
    symbol: 'interactor_dart_allocate_message',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<interactor_message> interactor_dart_allocate_message(
  ffi.Pointer<interactor_dart> interactor,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_dart>, ffi.Pointer<interactor_message>)>(
    symbol: 'interactor_dart_free_message',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_free_message(
  ffi.Pointer<interactor_dart> interactor,
  ffi.Pointer<interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<interactor_payload_pool> Function(
            ffi.Pointer<interactor_dart>, ffi.Size)>(
    symbol: 'interactor_dart_payload_pool_create',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<interactor_payload_pool>
    interactor_dart_payload_pool_create(
  ffi.Pointer<interactor_dart> interactor,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<interactor_payload_pool>)>(
    symbol: 'interactor_dart_payload_allocate',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Void> interactor_dart_payload_allocate(
  ffi.Pointer<interactor_payload_pool> pool,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_payload_pool>, ffi.Pointer<ffi.Void>)>(
    symbol: 'interactor_dart_payload_free',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_payload_free(
  ffi.Pointer<interactor_payload_pool> pool,
  ffi.Pointer<ffi.Void> pointer,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_payload_pool>)>(
    symbol: 'interactor_dart_payload_pool_destroy',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_payload_pool_destroy(
  ffi.Pointer<interactor_payload_pool> pool,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<interactor_payload_pool>)>(
    symbol: 'interactor_dart_payload_pool_size',
    assetId: 'interactor-bindings',
    isLeaf: true)
external int interactor_dart_payload_pool_size(
  ffi.Pointer<interactor_payload_pool> pool,
);

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<interactor_dart>, ffi.Size)>(
    symbol: 'interactor_dart_data_allocate',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Void> interactor_dart_data_allocate(
  ffi.Pointer<interactor_dart> interactor,
  int size,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_dart>, ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'interactor_dart_data_free',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_data_free(
  ffi.Pointer<interactor_dart> interactor,
  ffi.Pointer<ffi.Void> pointer,
  int size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<interactor_dart>)>(
    symbol: 'interactor_dart_peek',
    assetId: 'interactor-bindings',
    isLeaf: true)
external int interactor_dart_peek(
  ffi.Pointer<interactor_dart> interactor,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_dart>, ffi.Int,
            ffi.Pointer<interactor_message>)>(
    symbol: 'interactor_dart_call_native',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_call_native(
  ffi.Pointer<interactor_dart> interactor,
  int target_ring_fd,
  ffi.Pointer<interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_dart>, ffi.Pointer<interactor_message>)>(
    symbol: 'interactor_dart_callback_to_native',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_callback_to_native(
  ffi.Pointer<interactor_dart> interactor,
  ffi.Pointer<interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_dart>, ffi.Int)>(
    symbol: 'interactor_dart_cqe_advance',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_cqe_advance(
  ffi.Pointer<interactor_dart> interactor,
  int count,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_dart>)>(
    symbol: 'interactor_dart_destroy',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_destroy(
  ffi.Pointer<interactor_dart> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: 'interactor_dart_close_descriptor',
    assetId: 'interactor-bindings',
    isLeaf: true)
external void interactor_dart_close_descriptor(
  int fd,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>(
    symbol: 'interactor_dart_error_to_string',
    assetId: 'interactor-bindings',
    isLeaf: true)
external ffi.Pointer<ffi.Char> interactor_dart_error_to_string(
  int error,
);

@ffi.Native<ffi.Uint64 Function(ffi.Pointer<ffi.Char>, ffi.Uint64)>(
    symbol: 'interactor_dart_tuple_next',
    assetId: 'interactor-bindings',
    isLeaf: true)
external int interactor_dart_tuple_next(
  ffi.Pointer<ffi.Char> buffer,
  int offset,
);

final class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Size()
  external int iov_len;
}

final class interactor_message extends ffi.Struct {
  @ffi.Uint64()
  external int id;

  @ffi.Uint64()
  external int source;

  @ffi.Uint64()
  external int target;

  @ffi.Uint64()
  external int owner;

  @ffi.Uint64()
  external int method;

  external ffi.Pointer<ffi.Void> input;

  @ffi.Size()
  external int input_size;

  external ffi.Pointer<ffi.Void> output;

  @ffi.Size()
  external int output_size;

  @ffi.Uint16()
  external int flags;
}

final class interactor_completion_event extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int user_data;

  @ffi.Int()
  external int res;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedLongLong> big_cqe;
}

final class io_uring extends ffi.Opaque {}

final class io_uring_cqe extends ffi.Opaque {}

final class interactor_messages_pool extends ffi.Opaque {}

final class interactor_static_buffers extends ffi.Opaque {}

final class interactor_io_buffers extends ffi.Opaque {}

final class interactor_small_data extends ffi.Opaque {}

final class interactor_memory extends ffi.Opaque {}

final class interactor_dart_configuration extends ffi.Struct {
  @ffi.Size()
  external int quota_size;

  @ffi.Size()
  external int preallocation_size;

  @ffi.Size()
  external int slab_size;

  @ffi.Size()
  external int static_buffers_capacity;

  @ffi.Size()
  external int static_buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.Double()
  external double delay_randomization_factor;

  @ffi.Uint64()
  external int max_delay_micros;

  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Uint32()
  external int ring_flags;

  @ffi.Uint32()
  external int base_delay_micros;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;
}

final class interactor_dart extends ffi.Struct {
  external ffi.Pointer<interactor_dart_messages_pool> messages_pool;

  external ffi.Pointer<interactor_dart_static_buffers> static_buffers;

  external ffi.Pointer<interactor_dart_io_buffers> io_buffers;

  external ffi.Pointer<interactor_dart_small_data> small_data;

  external ffi.Pointer<interactor_dart_memory> memory;

  external ffi.Pointer<interactor_dart_io_uring> ring;

  @ffi.Size()
  external int ring_size;

  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Uint64()
  external int max_delay_micros;

  @ffi.Double()
  external double delay_randomization_factor;

  external ffi.Pointer<ffi.Pointer<interactor_dart_completion_event>>
      completions;

  @ffi.Int32()
  external int descriptor;

  @ffi.Uint32()
  external int ring_flags;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;

  @ffi.Uint32()
  external int base_delay_micros;

  @ffi.Uint8()
  external int id;
}

typedef interactor_dart_messages_pool = interactor_messages_pool;
typedef interactor_dart_static_buffers = interactor_static_buffers;
typedef interactor_dart_io_buffers = interactor_io_buffers;
typedef interactor_dart_small_data = interactor_small_data;
typedef interactor_dart_memory = interactor_memory;
typedef interactor_dart_io_uring = io_uring;
typedef interactor_dart_completion_event = io_uring_cqe;

final class interactor_input_buffer extends ffi.Opaque {}

final class interactor_output_buffer extends ffi.Opaque {}

final class interactor_payload_pool extends ffi.Opaque {}
